{
  "id": "@itentialopensource/adapter-tufin_securetrack",
  "type": "Adapter",
  "export": "TufinSecuretrack",
  "title": "Tufin_securetrack",
  "src": "adapter.js",
  "roles": [
    "admin"
  ],
  "methods": [
    {
      "name": "iapUpdateAdapterConfiguration",
      "summary": "Updates the adapter configuration",
      "description": "Updates the adapter configuration file with the provided changes",
      "input": [
        {
          "name": "configFile",
          "type": "string",
          "info": "The name of the file to change",
          "required": true,
          "schema": {
            "title": "configFile",
            "type": "string"
          }
        },
        {
          "name": "changes",
          "type": "object",
          "info": "JSON object containing the configuration changes",
          "required": true,
          "schema": {
            "title": "changes",
            "type": "object"
          }
        },
        {
          "name": "entity",
          "type": "string",
          "info": "The entity in which the changes are being made",
          "required": false,
          "schema": {
            "title": "entity",
            "type": "string"
          }
        },
        {
          "name": "type",
          "type": "string",
          "info": "The type of file to change - action, schema, or mock",
          "required": false,
          "schema": {
            "title": "type",
            "type": "string"
          }
        },
        {
          "name": "action",
          "type": "string",
          "info": "The action to be changed",
          "required": false,
          "schema": {
            "title": "action",
            "type": "string"
          }
        },
        {
          "name": "replace",
          "type": "boolean",
          "info": "True to replace entire mock data, false to merge/append",
          "required": false,
          "schema": {
            "title": "replace",
            "type": "boolean"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapUpdateAdapterConfiguration"
      },
      "task": true
    },
    {
      "name": "iapSuspendAdapter",
      "summary": "Suspends the adapter",
      "description": "Suspends the adapter",
      "input": [
        {
          "name": "mode",
          "type": "enum",
          "enumerals": [
            "pause",
            "error"
          ],
          "info": "How incoming requests are handled. Defaults to 'pause'",
          "description": "How incoming requests are handled. Defaults to 'pause'",
          "schema": {
            "title": "mode",
            "type": "string"
          },
          "required": false
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing the adapter suspended status",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapSuspendAdapter"
      },
      "task": true
    },
    {
      "name": "iapUnsuspendAdapter",
      "summary": "Unsuspends the adapter",
      "description": "Unsuspends the adapter",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing the adapter suspended status",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapUnsuspendAdapter"
      },
      "task": true
    },
    {
      "name": "iapGetAdapterQueue",
      "summary": "Return the requests that are waiting in the queue if throttling is enabled",
      "description": "Return the requests that are waiting in the queue if throttling is enabled",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing the adapter queue",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapGetAdapterQueue"
      },
      "task": true
    },
    {
      "name": "iapFindAdapterPath",
      "summary": "Provides the ability to see if a particular API path is supported by the adapter",
      "description": "Provides the ability to see if a particular API path is supported by the adapter",
      "input": [
        {
          "name": "apiPath",
          "type": "string",
          "info": "The API Path you want to check - make sure to not include base path and version",
          "description": "The API Path you want to check - make sure to not include base path and version",
          "schema": {
            "title": "apiPath",
            "type": "string"
          },
          "required": true
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapFindAdapterPath"
      },
      "task": true
    },
    {
      "name": "iapTroubleshootAdapter",
      "summary": "Runs troubleshoot script for adapter",
      "description": "Runs troubleshoot script for adapter",
      "input": [
        {
          "name": "props",
          "type": "object",
          "info": "Object containing configuration, healthcheck and auth properties {'connProps':{'host': 'api.service.com', 'base_path': '/', 'protocol': 'http', 'port': 443, 'version': 'v1'},'healthCheckEndpoint': '/healthcheck', 'auth': {'auth_method': 'no authentication', 'username': 'username', 'password': 'password'}}",
          "required": true,
          "schema": {
            "title": "props",
            "type": "object"
          }
        },
        {
          "name": "persistFlag",
          "type": "boolean",
          "info": "Whether the input properties should be saved",
          "required": true,
          "schema": {
            "title": "persistFlag",
            "type": "boolean"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing the test results",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapTroubleshootAdapter"
      },
      "task": true
    },
    {
      "name": "iapRunAdapterHealthcheck",
      "summary": "Runs healthcheck script for adapter",
      "description": "Runs healthcheck script for adapter",
      "input": [],
      "output": {
        "name": "result",
        "type": "boolean",
        "description": "Whether healthcheck passed or failed",
        "schema": {
          "title": "result",
          "type": "boolean"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapRunAdapterHealthcheck"
      },
      "task": true
    },
    {
      "name": "iapRunAdapterConnectivity",
      "summary": "Runs connectivity check script for adapter",
      "description": "Runs connectivity check script for adapter",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing the test results",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapRunAdapterConnectivity"
      },
      "task": true
    },
    {
      "name": "iapRunAdapterBasicGet",
      "summary": "Runs basicGet script for adapter",
      "description": "Runs basicGet script for adapter",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing the test results",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapRunAdapterBasicGet"
      },
      "task": true
    },
    {
      "name": "iapMoveAdapterEntitiesToDB",
      "summary": "Moves entities from an adapter into the IAP database",
      "description": "Moves entities from an adapter into the IAP database",
      "input": [],
      "output": {
        "name": "res",
        "type": "object",
        "description": "A JSON Object containing status, code and the response from the mongo transaction",
        "schema": {
          "title": "res",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapMoveAdapterEntitiesToDB"
      },
      "task": true
    },
    {
      "name": "iapDeactivateTasks",
      "summary": "Deactivate the inputted tasks",
      "description": "Deactivate the inputted tasks",
      "input": [
        {
          "name": "tasks",
          "type": "array",
          "description": "Tasks to deactivate",
          "schema": {
            "title": "tasks",
            "type": "array"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing success status",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapDeactivateTasks"
      },
      "task": true
    },
    {
      "name": "iapActivateTasks",
      "summary": "Activate the inputted tasks",
      "description": "activate the inputted tasks",
      "input": [
        {
          "name": "tasks",
          "type": "array",
          "description": "Tasks to activate",
          "schema": {
            "title": "tasks",
            "type": "array"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing success status",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapActivateTasks"
      },
      "task": true
    },
    {
      "name": "iapPopulateEntityCache",
      "summary": "Populate the cache for the given entities",
      "description": "Populate the cache for the given entities",
      "input": [
        {
          "name": "entityTypes",
          "type": "array",
          "info": "the entity type(s) to populate",
          "required": true,
          "schema": {
            "title": "entityTypes",
            "type": "array"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapPopulateEntityCache"
      },
      "task": true
    },
    {
      "name": "iapRetrieveEntitiesCache",
      "summary": "Retrieves data from cache for specified entity type",
      "description": "Retrieves data from cache for specified entity type",
      "input": [
        {
          "name": "entityType",
          "type": "string",
          "info": "entity of which to retrieve",
          "required": true,
          "schema": {
            "title": "entityType",
            "type": "string"
          }
        },
        {
          "name": "options",
          "type": "object",
          "info": "settings of which data to return and how to return it",
          "required": false,
          "schema": {
            "title": "options",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapRetrieveEntitiesCache"
      },
      "task": true
    },
    {
      "name": "getDevice",
      "summary": "Get the Appliance",
      "description": "Get the Appliance",
      "input": [
        {
          "name": "deviceName",
          "type": "string",
          "info": "An Appliance Device Name",
          "required": true,
          "schema": {
            "title": "deviceName",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevice"
      },
      "task": false
    },
    {
      "name": "getDevicesFiltered",
      "summary": "Get Appliances that match the filter",
      "description": "Get Appliances that match the filter",
      "input": [
        {
          "name": "options",
          "type": "object",
          "info": "options - e.g. { 'start': 1, 'limit': 20, 'filter': { 'name': 'abc123' } }",
          "required": true,
          "schema": {
            "title": "options",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "array",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "array"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevicesFiltered"
      },
      "task": false
    },
    {
      "name": "isAlive",
      "summary": "Checks the status for the provided Appliance",
      "description": "Checks the status for the provided Appliance",
      "input": [
        {
          "name": "deviceName",
          "type": "string",
          "info": "An Appliance Device Name",
          "required": true,
          "schema": {
            "title": "deviceName",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "boolean",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "boolean"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/isAlive"
      },
      "task": false
    },
    {
      "name": "getConfig",
      "summary": "Gets a config for the provided Appliance",
      "description": "Gets a config for the provided Appliance",
      "input": [
        {
          "name": "deviceName",
          "type": "string",
          "info": "An Appliance Device Name",
          "required": true,
          "schema": {
            "title": "deviceName",
            "type": "string"
          }
        },
        {
          "name": "format",
          "type": "string",
          "info": "The format to be returned - this is ignored as we always return json",
          "required": false,
          "schema": {
            "title": "format",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getConfig"
      },
      "task": false
    },
    {
      "name": "iapGetDeviceCount",
      "summary": "Gets a device count from the system",
      "description": "Gets a device count from the system",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapGetDeviceCount"
      },
      "task": false
    },
    {
      "name": "iapExpandedGenericAdapterRequest",
      "summary": "Makes the requested generic call with additional options",
      "description": "Makes the requested generic call with additional options via metadata",
      "input": [
        {
          "name": "metadata",
          "type": "object",
          "info": "metadata for the call (optional)",
          "description": "metadata for the call - allows for many enhancements (optional)",
          "schema": {
            "title": "metadata",
            "type": "object"
          },
          "required": false
        },
        {
          "name": "uriPath",
          "type": "string",
          "info": "the path of the api call - do not include the host, port, base path or version",
          "description": "the path of the api call",
          "schema": {
            "title": "uriPath",
            "type": "string"
          },
          "required": false
        },
        {
          "name": "restMethod",
          "type": "string",
          "info": "the rest method (GET, POST, PUT, PATCH, DELETE)",
          "description": "the rest method (GET, POST, PUT, PATCH, DELETE)",
          "schema": {
            "title": "restMethod",
            "type": "string"
          },
          "required": false
        },
        {
          "name": "pathVars",
          "type": "object",
          "info": "the parameters to be put within the url path (optional)",
          "description": "the parameters to be put within the url path (optional)",
          "schema": {
            "title": "pathVars",
            "type": "object"
          },
          "required": false
        },
        {
          "name": "queryData",
          "type": "object",
          "info": "the query parameters to be put on the url (optional)",
          "description": "the query parameters to be put on the url (optional)",
          "schema": {
            "title": "queryData",
            "type": "object"
          },
          "required": false
        },
        {
          "name": "requestBody",
          "type": "object",
          "info": "the payload to be sent with the request (optional)",
          "description": "the payload to be sent with the request (optional)",
          "schema": {
            "title": "requestBody",
            "type": "object"
          },
          "required": false
        },
        {
          "name": "addlHeaders",
          "type": "object",
          "info": "additional headers to be put on the call (optional)",
          "description": "additional headers to be put on the call (optional)",
          "schema": {
            "title": "addlHeaders",
            "type": "object"
          },
          "required": false
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/iapExpandedGenericAdapterRequest"
      },
      "task": true
    },
    {
      "name": "genericAdapterRequest",
      "summary": "Makes the requested generic call",
      "description": "Makes the requested generic call",
      "input": [
        {
          "name": "uriPath",
          "type": "string",
          "info": "the path of the api call - do not include the host, port, base path or version",
          "description": "the path of the api call",
          "schema": {
            "title": "uriPath",
            "type": "string"
          },
          "required": true
        },
        {
          "name": "restMethod",
          "type": "string",
          "info": "the rest method (GET, POST, PUT, PATCH, DELETE)",
          "description": "the rest method (GET, POST, PUT, PATCH, DELETE)",
          "schema": {
            "title": "restMethod",
            "type": "string"
          },
          "required": true
        },
        {
          "name": "queryData",
          "type": "object",
          "info": "the query parameters to be put on the url (optional)",
          "description": "the query parameters to be put on the url (optional)",
          "schema": {
            "title": "queryData",
            "type": "object"
          },
          "required": false
        },
        {
          "name": "requestBody",
          "type": "object",
          "info": "the payload to be sent with the request (optional)",
          "description": "the payload to be sent with the request (optional)",
          "schema": {
            "title": "requestBody",
            "type": "object"
          },
          "required": false
        },
        {
          "name": "addlHeaders",
          "type": "object",
          "info": "additional headers to be put on the call (optional)",
          "description": "additional headers to be put on the call (optional)",
          "schema": {
            "title": "addlHeaders",
            "type": "object"
          },
          "required": false
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/genericAdapterRequest"
      },
      "task": true
    },
    {
      "name": "genericAdapterRequestNoBasePath",
      "summary": "Makes the requested generic call",
      "description": "Makes the requested generic call",
      "input": [
        {
          "name": "uriPath",
          "type": "string",
          "info": "the path of the api call - do not include the host, port, base path or version",
          "description": "the path of the api call",
          "schema": {
            "title": "uriPath",
            "type": "string"
          },
          "required": true
        },
        {
          "name": "restMethod",
          "type": "string",
          "info": "the rest method (GET, POST, PUT, PATCH, DELETE)",
          "description": "the rest method (GET, POST, PUT, PATCH, DELETE)",
          "schema": {
            "title": "restMethod",
            "type": "string"
          },
          "required": true
        },
        {
          "name": "queryData",
          "type": "object",
          "info": "the query parameters to be put on the url (optional)",
          "description": "the query parameters to be put on the url (optional)",
          "schema": {
            "title": "queryData",
            "type": "object"
          },
          "required": false
        },
        {
          "name": "requestBody",
          "type": "object",
          "info": "the payload to be sent with the request (optional)",
          "description": "the payload to be sent with the request (optional)",
          "schema": {
            "title": "requestBody",
            "type": "object"
          },
          "required": false
        },
        {
          "name": "addlHeaders",
          "type": "object",
          "info": "additional headers to be put on the call (optional)",
          "description": "additional headers to be put on the call (optional)",
          "schema": {
            "title": "addlHeaders",
            "type": "object"
          },
          "required": false
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/genericAdapterRequestNoBasePath"
      },
      "task": true
    },
    {
      "name": "iapRunAdapterLint",
      "summary": "Run the adapter lint script to return the results",
      "description": "Run the adapter lint script to return the results",
      "input": [],
      "output": {
        "name": "result",
        "type": "string",
        "description": "A string containing the run results",
        "schema": {
          "title": "result",
          "type": "string"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/iapRunAdapterLint"
      },
      "task": true
    },
    {
      "name": "iapRunAdapterTests",
      "summary": "Run the adapter test scripts (baseunit and unit) to return the results",
      "description": "Run the adapter test scripts (baseunit and unit) to return the results",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/iapRunAdapterTests"
      },
      "task": true
    },
    {
      "name": "iapGetAdapterInventory",
      "summary": "Provide inventory information abbout the adapter",
      "description": "Provide inventory information abbout the adapter",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/iapGetAdapterInventory"
      },
      "task": true
    },
    {
      "name": "getAdditionalParametersIdentitiesByRevision",
      "summary": "Get additional parameters identities by revision",
      "description": "Get additional parameters identities by revision",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAdditionalParametersIdentitiesByRevision"
      },
      "task": true
    },
    {
      "name": "getSpecificAdditionalParameterIdentity",
      "summary": "Get specific additional parameter identity",
      "description": "Get specific additional parameter identity",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificAdditionalParameterIdentity"
      },
      "task": true
    },
    {
      "name": "getAURLCategory",
      "summary": "Get a URL Category.",
      "description": "Get a URL Category.",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAURLCategory"
      },
      "task": true
    },
    {
      "name": "getApplicationIdentitiesByDevice",
      "summary": "Get application identities by device",
      "description": "Get application identities by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getApplicationIdentitiesByDevice"
      },
      "task": true
    },
    {
      "name": "getSpecificApplicationIdentity",
      "summary": "Get specific application identity",
      "description": "Get specific application identity",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificApplicationIdentity"
      },
      "task": true
    },
    {
      "name": "getApplicationsIdentitiesByRevision",
      "summary": "Get applications identities by revision",
      "description": "Get applications identities by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getApplicationsIdentitiesByRevision"
      },
      "task": true
    },
    {
      "name": "getRevisionsRevisionIdApplicationsIds",
      "summary": "Get specific application identity",
      "description": "Get specific application identity",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRevisionsRevisionIdApplicationsIds"
      },
      "task": true
    },
    {
      "name": "determineIfChangesBetweenTwoRevisionsAreAuthorized",
      "summary": "Determine if changes between two revisions are authorized",
      "description": "Determine if changes between two revisions are authorized",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/determineIfChangesBetweenTwoRevisionsAreAuthorized"
      },
      "task": true
    },
    {
      "name": "compareRevisionsOnTwoDifferentDevicesInTermsOfTraffic",
      "summary": "Compare revisions on two different devices in terms of traffic.",
      "description": "Compare revisions on two different devices in terms of traffic.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/compareRevisionsOnTwoDifferentDevicesInTermsOfTraffic"
      },
      "task": true
    },
    {
      "name": "getNameAndStatusForAllChangeWindows",
      "summary": "Get name and status for all change windows",
      "description": "Get name and status for all change windows",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getNameAndStatusForAllChangeWindows"
      },
      "task": true
    },
    {
      "name": "getSchedulingAndDeviceDetailsForASpecificChangeWindow",
      "summary": "Get scheduling and device details for a specific change window",
      "description": "Get scheduling and device details for a specific change window",
      "input": [
        {
          "name": "uid",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "uid",
            "type": "string"
          }
        },
        {
          "name": "taskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "taskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSchedulingAndDeviceDetailsForASpecificChangeWindow"
      },
      "task": true
    },
    {
      "name": "getAListOfCompletedPolicyChangesForASpecificChangeWindow",
      "summary": "Get a list of completed policy changes for a specific change window",
      "description": "Get a list of completed policy changes for a specific change window",
      "input": [
        {
          "name": "uid",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "uid",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAListOfCompletedPolicyChangesForASpecificChangeWindow"
      },
      "task": true
    },
    {
      "name": "getNetworkInterfacesByDevice",
      "summary": "Get network interfaces by device",
      "description": "Get network interfaces by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkInterfacesByDevice"
      },
      "task": true
    },
    {
      "name": "getNetworkInterfacesByRevision",
      "summary": "Get network interfaces by revision",
      "description": "Get network interfaces by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkInterfacesByRevision"
      },
      "task": true
    },
    {
      "name": "getDeviceZonesByRevision",
      "summary": "Get device zones by revision",
      "description": "Get device zones by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDeviceZonesByRevision"
      },
      "task": true
    },
    {
      "name": "getDeviceZonesByDevice",
      "summary": "Get device zones by device",
      "description": "Get device zones by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDeviceZonesByDevice"
      },
      "task": true
    },
    {
      "name": "getZonesAndNetworkInterfacesThatParticipateInSubPolicies",
      "summary": "Get zones and network interfaces that participate in sub-policies",
      "description": "Get zones and network interfaces that participate in sub-policies",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getZonesAndNetworkInterfacesThatParticipateInSubPolicies"
      },
      "task": true
    },
    {
      "name": "getDomain",
      "summary": "Get domain",
      "description": "Get domain",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDomain"
      },
      "task": true
    },
    {
      "name": "updateADomain",
      "summary": "Update a domain",
      "description": "Update a domain",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateADomain"
      },
      "task": true
    },
    {
      "name": "addADomain",
      "summary": "Add a domain",
      "description": "Add a domain",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addADomain"
      },
      "task": true
    },
    {
      "name": "getAllDomains",
      "summary": "Get all domains",
      "description": "Get all domains",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getAllDomains"
      },
      "task": true
    },
    {
      "name": "getGeneralProperties",
      "summary": "Get general properties",
      "description": "Get general properties",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getGeneralProperties"
      },
      "task": true
    },
    {
      "name": "getCiscoCryptographicMapsByRevision",
      "summary": "Get Cisco cryptographic maps by revision",
      "description": "Get Cisco cryptographic maps by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCiscoCryptographicMapsByRevision"
      },
      "task": true
    },
    {
      "name": "getCiscoIPsecPolicyAndPeers",
      "summary": "Get Cisco IPsec policy and peers",
      "description": "Get Cisco IPsec policy and peers",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCiscoIPsecPolicyAndPeers"
      },
      "task": true
    },
    {
      "name": "getCheckPointVPNIPSecCommunitiesAndGateways",
      "summary": "Get Check Point VPN (IPSec) communities and gateways",
      "description": "Get Check Point VPN (IPSec) communities and gateways",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCheckPointVPNIPSecCommunitiesAndGateways"
      },
      "task": true
    },
    {
      "name": "getCiscoCryptographicMapsByDevice",
      "summary": "Get Cisco cryptographic maps by device",
      "description": "Get Cisco cryptographic maps by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCiscoCryptographicMapsByDevice"
      },
      "task": true
    },
    {
      "name": "getResolvedInternetRepresentationForDevice",
      "summary": "Get resolved Internet representation for device",
      "description": "Get resolved Internet representation for device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getResolvedInternetRepresentationForDevice"
      },
      "task": true
    },
    {
      "name": "createNewInternetRepresentationForADevice",
      "summary": "Create new Internet representation for a device",
      "description": "Create new Internet representation for a device",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createNewInternetRepresentationForADevice"
      },
      "task": true
    },
    {
      "name": "deleteInternetRepresentationForDevice",
      "summary": "Delete Internet representation for device",
      "description": "Delete Internet representation for device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteInternetRepresentationForDevice"
      },
      "task": true
    },
    {
      "name": "updateInternetRepresentationForDevice",
      "summary": "Update Internet representation for device",
      "description": "Update Internet representation for device",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateInternetRepresentationForDevice"
      },
      "task": true
    },
    {
      "name": "getInternetRepresentationForDevice",
      "summary": "Get Internet representation for device",
      "description": "Get Internet representation for device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getInternetRepresentationForDevice"
      },
      "task": true
    },
    {
      "name": "getLDAPEntryDetailsByDN",
      "summary": "Get LDAP entry details by DN",
      "description": "Get LDAP entry details by DN",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getLDAPEntryDetailsByDN"
      },
      "task": true
    },
    {
      "name": "returnEntriesThatExactlyMatchOneOfTheGivenStrings",
      "summary": "Return entries that exactly match one of the given strings",
      "description": "Return entries that exactly match one of the given strings",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/returnEntriesThatExactlyMatchOneOfTheGivenStrings"
      },
      "task": true
    },
    {
      "name": "getTheBaseDNEntryDetails",
      "summary": "Get the base DN entry details",
      "description": "Get the base DN entry details",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getTheBaseDNEntryDetails"
      },
      "task": true
    },
    {
      "name": "returnLDAPEntriesWhichMatchTheGivenSearchCriteria",
      "summary": "Return LDAP entries which match the given search criteria",
      "description": "Return LDAP entries which match the given search criteria",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/returnLDAPEntriesWhichMatchTheGivenSearchCriteria"
      },
      "task": true
    },
    {
      "name": "getTextualConfigurationByRevision",
      "summary": "Get textual configuration by revision",
      "description": "Get textual configuration by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTextualConfigurationByRevision"
      },
      "task": true
    },
    {
      "name": "importManagedDevices",
      "summary": "Import managed devices",
      "description": "Import managed devices",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/importManagedDevices"
      },
      "task": true
    },
    {
      "name": "editSecuretrackDevice",
      "summary": "Edit Securetrack device",
      "description": "Edit Securetrack device",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/editSecuretrackDevice"
      },
      "task": true
    },
    {
      "name": "addDevicesToSecureTrack",
      "summary": "Add devices to SecureTrack",
      "description": "Add devices to SecureTrack",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addDevicesToSecureTrack"
      },
      "task": true
    },
    {
      "name": "getSpecificTaskResultsOfBulkOperationsOnDevices",
      "summary": "Get specific task results of bulk operations on devices",
      "description": "Get specific task results of bulk operations on devices",
      "input": [
        {
          "name": "taskUid",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "taskUid",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificTaskResultsOfBulkOperationsOnDevices"
      },
      "task": true
    },
    {
      "name": "addConfigurationForOfflineDevice",
      "summary": "Add configuration for offline device",
      "description": "Add configuration for offline device",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addConfigurationForOfflineDevice"
      },
      "task": true
    },
    {
      "name": "getSpecificDevice",
      "summary": "Get specific device",
      "description": "Get specific device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificDevice"
      },
      "task": true
    },
    {
      "name": "updateOfflineDevice",
      "summary": "Update offline device",
      "description": "Update offline device",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateOfflineDevice"
      },
      "task": true
    },
    {
      "name": "getDevices",
      "summary": "Get devices",
      "description": "Get devices",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getDevices"
      },
      "task": true
    },
    {
      "name": "addOfflineDevice",
      "summary": "Add offline device",
      "description": "Add offline device",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addOfflineDevice"
      },
      "task": true
    },
    {
      "name": "getTextualConfigurationByDevice",
      "summary": "Get textual configuration by device",
      "description": "Get textual configuration by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTextualConfigurationByDevice"
      },
      "task": true
    },
    {
      "name": "getNATObjectsByDevice",
      "summary": "Get NAT objects by device",
      "description": "Get NAT objects by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNATObjectsByDevice"
      },
      "task": true
    },
    {
      "name": "getNATObjectsByRevision",
      "summary": "Get NAT objects by revision",
      "description": "Get NAT objects by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNATObjectsByRevision"
      },
      "task": true
    },
    {
      "name": "getNATRulesByDevice",
      "summary": "Get NAT rules by device",
      "description": "Get NAT rules by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNATRulesByDevice"
      },
      "task": true
    },
    {
      "name": "getNetworkGroupsContainingSpecifiedNetworkObject",
      "summary": "Get network groups containing specified network object",
      "description": "Get network groups containing specified network object",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkGroupsContainingSpecifiedNetworkObject"
      },
      "task": true
    },
    {
      "name": "getSpecificNetworkObjectsByRevision",
      "summary": "Get specific network objects by revision",
      "description": "Get specific network objects by revision",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificNetworkObjectsByRevision"
      },
      "task": true
    },
    {
      "name": "getSpecificNetworkObject",
      "summary": "Get specific network object",
      "description": "Get specific network object",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificNetworkObject"
      },
      "task": true
    },
    {
      "name": "getNetworkObjectsByRevision",
      "summary": "Get network objects by revision",
      "description": "Get network objects by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkObjectsByRevision"
      },
      "task": true
    },
    {
      "name": "getNetworkObjectsMatchingSpecifiedCriteria",
      "summary": "Get network objects matching specified criteria",
      "description": "Get network objects matching specified criteria",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getNetworkObjectsMatchingSpecifiedCriteria"
      },
      "task": true
    },
    {
      "name": "getRulesContainingSpecifiedNetworkObject",
      "summary": "Get rules containing specified network object",
      "description": "Get rules containing specified network object",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesContainingSpecifiedNetworkObject"
      },
      "task": true
    },
    {
      "name": "getNetworkObjectsByDevice",
      "summary": "Get network objects by device",
      "description": "Get network objects by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkObjectsByDevice"
      },
      "task": true
    },
    {
      "name": "getSpecificTopologyCloud",
      "summary": "Get Specific topology cloud",
      "description": "Get Specific topology cloud",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificTopologyCloud"
      },
      "task": true
    },
    {
      "name": "updateACloud",
      "summary": "Update a cloud",
      "description": "Update a cloud",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateACloud"
      },
      "task": true
    },
    {
      "name": "getTopologySubnets",
      "summary": "Get topology subnets",
      "description": "Get topology subnets",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getTopologySubnets"
      },
      "task": true
    },
    {
      "name": "getTopologyNetworkInterfacesByDevice",
      "summary": "Get topology network interfaces by device",
      "description": "Get topology network interfaces by device",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getTopologyNetworkInterfacesByDevice"
      },
      "task": true
    },
    {
      "name": "getMostSpecificNetworkInterfacesFromWhichAHostIPIsAccessible",
      "summary": "Get most specific network interfaces from which a host IP is accessible",
      "description": "Get most specific network interfaces from which a host IP is accessible",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getMostSpecificNetworkInterfacesFromWhichAHostIPIsAccessible"
      },
      "task": true
    },
    {
      "name": "getSpecificTopologySubnet",
      "summary": "Get Specific topology subnet",
      "description": "Get Specific topology subnet",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificTopologySubnet"
      },
      "task": true
    },
    {
      "name": "getTopologySynchronizationStatus",
      "summary": "Get Topology Synchronization status",
      "description": "Get Topology Synchronization status",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getTopologySynchronizationStatus"
      },
      "task": true
    },
    {
      "name": "deleteGenericDeviceFromTopologyModel",
      "summary": "Delete generic device from Topology model",
      "description": "Delete generic device from Topology model",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteGenericDeviceFromTopologyModel"
      },
      "task": true
    },
    {
      "name": "updateAnExistingGenericDeviceInTheTopologyModel",
      "summary": "Update an existing generic device in the Topology model",
      "description": "Update an existing generic device in the Topology model",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateAnExistingGenericDeviceInTheTopologyModel"
      },
      "task": true
    },
    {
      "name": "getCloudInternalNetworks",
      "summary": "Get Cloud Internal Networks",
      "description": "Get Cloud Internal Networks",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCloudInternalNetworks"
      },
      "task": true
    },
    {
      "name": "getCloudInformation",
      "summary": "Get cloud information",
      "description": "Get cloud information",
      "input": [
        {
          "name": "cloudId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "cloudId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCloudInformation"
      },
      "task": true
    },
    {
      "name": "synchronizeTheTopologyModel",
      "summary": "Synchronize the Topology model",
      "description": "Synchronize the Topology model",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/synchronizeTheTopologyModel"
      },
      "task": true
    },
    {
      "name": "getTopologyGenericVPNConnections",
      "summary": "Get topology generic VPN connections",
      "description": "Get topology generic VPN connections",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getTopologyGenericVPNConnections"
      },
      "task": true
    },
    {
      "name": "getTopologyRoutingTablesForAGivenDevice",
      "summary": "Get topology routing tables for a given device",
      "description": "Get topology routing tables for a given device",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getTopologyRoutingTablesForAGivenDevice"
      },
      "task": true
    },
    {
      "name": "getTopologyCloudSuggestions",
      "summary": "Get cloud information",
      "description": "Get cloud information",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getTopologyCloudSuggestions"
      },
      "task": true
    },
    {
      "name": "addGenericDeviceToTopologyModel",
      "summary": "Add generic device to Topology model",
      "description": "Add generic device to Topology model",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addGenericDeviceToTopologyModel"
      },
      "task": true
    },
    {
      "name": "getGenericDevicesThatAreConfiguredInST",
      "summary": "Get generic devices that are configured in ST",
      "description": "Get generic devices that are configured in ST",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getGenericDevicesThatAreConfiguredInST"
      },
      "task": true
    },
    {
      "name": "getPathImageForSpecifiedTraffic",
      "summary": "Get path image for specified traffic",
      "description": "Get path image for specified traffic",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getPathImageForSpecifiedTraffic"
      },
      "task": true
    },
    {
      "name": "getPathForSpecifiedTraffic",
      "summary": "Get path for specified traffic",
      "description": "Get path for specified traffic",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getPathForSpecifiedTraffic"
      },
      "task": true
    },
    {
      "name": "createAJoinedTopologyCloud",
      "summary": "Create a joined topology cloud",
      "description": "Create a joined topology cloud",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAJoinedTopologyCloud"
      },
      "task": true
    },
    {
      "name": "getTopologyClouds",
      "summary": "Get topology clouds",
      "description": "Get topology clouds",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getTopologyClouds"
      },
      "task": true
    },
    {
      "name": "getASpecificZonePatternEntryForASpecificZone",
      "summary": "Get a specific zone pattern entry for a specific zone",
      "description": "Get a specific zone pattern entry for a specific zone",
      "input": [
        {
          "name": "zoneId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificZonePatternEntryForASpecificZone"
      },
      "task": true
    },
    {
      "name": "createAZonePatternEntryInASpecificZone",
      "summary": "Create a zone pattern entry in a specific zone",
      "description": "Create a zone pattern entry in a specific zone",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "zoneId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAZonePatternEntryInASpecificZone"
      },
      "task": true
    },
    {
      "name": "getAllPatternEntriesForSpecificZones",
      "summary": "Get all pattern entries for specific zones",
      "description": "Get all pattern entries for specific zones",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAllPatternEntriesForSpecificZones"
      },
      "task": true
    },
    {
      "name": "getASpecificZoneEntry",
      "summary": "Get a specific zone entry",
      "description": "Get a specific zone entry",
      "input": [
        {
          "name": "zoneId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificZoneEntry"
      },
      "task": true
    },
    {
      "name": "deleteZoneEntries",
      "summary": "Delete zone entries",
      "description": "Delete zone entries",
      "input": [
        {
          "name": "zoneId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteZoneEntries"
      },
      "task": true
    },
    {
      "name": "modifyAZoneEntry",
      "summary": "Modify a zone entry",
      "description": "Modify a zone entry",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "zoneId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifyAZoneEntry"
      },
      "task": true
    },
    {
      "name": "modifyMultipleExistingZoneEntries",
      "summary": "Modify multiple existing zone entries",
      "description": "Modify multiple existing zone entries",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "zoneIds",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "zoneIds",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifyMultipleExistingZoneEntries"
      },
      "task": true
    },
    {
      "name": "deleteZonesZoneIdsEntriesIds",
      "summary": "Modify a zone entry",
      "description": "Modify a zone entry",
      "input": [
        {
          "name": "zoneIds",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "zoneIds",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteZonesZoneIdsEntriesIds"
      },
      "task": true
    },
    {
      "name": "createAZoneEntry",
      "summary": "Create a zone entry",
      "description": "Create a zone entry",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "zoneId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAZoneEntry"
      },
      "task": true
    },
    {
      "name": "getEntriesForAZone",
      "summary": "Get entries for a zone",
      "description": "Get entries for a zone",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getEntriesForAZone"
      },
      "task": true
    },
    {
      "name": "importAZone",
      "summary": "Import a zone",
      "description": "Import a zone",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/importAZone"
      },
      "task": true
    },
    {
      "name": "getConfigurationUsagesForAZone",
      "summary": "Get configuration usages for a zone",
      "description": "Get configuration usages for a zone",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getConfigurationUsagesForAZone"
      },
      "task": true
    },
    {
      "name": "removeAZoneAsAnDescendantsToAZone",
      "summary": "Remove a zone as an descendants to a zone",
      "description": "Remove a zone as an descendants to a zone",
      "input": [
        {
          "name": "parentId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "parentId",
            "type": "string"
          }
        },
        {
          "name": "childIds",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "childIds",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/removeAZoneAsAnDescendantsToAZone"
      },
      "task": true
    },
    {
      "name": "addAZoneAsADescendantToAZone",
      "summary": "Add a zone as a descendant to a zone",
      "description": "Add a zone as a descendant to a zone",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "parentId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "parentId",
            "type": "string"
          }
        },
        {
          "name": "childIds",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "childIds",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addAZoneAsADescendantToAZone"
      },
      "task": true
    },
    {
      "name": "createAZone",
      "summary": "Create a zone",
      "description": "Create a zone",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAZone"
      },
      "task": true
    },
    {
      "name": "getAllZones",
      "summary": "Get all zones",
      "description": "Get all zones",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getAllZones"
      },
      "task": true
    },
    {
      "name": "deleteAllZones",
      "summary": "Delete all zones",
      "description": "Delete all zones",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/deleteAllZones"
      },
      "task": true
    },
    {
      "name": "getSharedZones",
      "summary": "Get shared zones",
      "description": "Get shared zones",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getSharedZones"
      },
      "task": true
    },
    {
      "name": "deleteAZone",
      "summary": "Delete a zone",
      "description": "Delete a zone",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteAZone"
      },
      "task": true
    },
    {
      "name": "addAZoneAsAnAncestorToAZone",
      "summary": "Add a zone as an ancestor to a zone",
      "description": "Add a zone as an ancestor to a zone",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "childId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "childId",
            "type": "string"
          }
        },
        {
          "name": "parentIds",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "parentIds",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addAZoneAsAnAncestorToAZone"
      },
      "task": true
    },
    {
      "name": "removeAZoneAsAnAncestorToAZone",
      "summary": "Remove a zone as an ancestor to a zone",
      "description": "Remove a zone as an ancestor to a zone",
      "input": [
        {
          "name": "childId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "childId",
            "type": "string"
          }
        },
        {
          "name": "parentIds",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "parentIds",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/removeAZoneAsAnAncestorToAZone"
      },
      "task": true
    },
    {
      "name": "modifyAZone",
      "summary": "Modify a zone",
      "description": "Modify a zone",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifyAZone"
      },
      "task": true
    },
    {
      "name": "getASpecificZone",
      "summary": "Get a specific zone",
      "description": "Get a specific zone",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificZone"
      },
      "task": true
    },
    {
      "name": "getAncestorZonesForAZone",
      "summary": "Get ancestor zones for a zone",
      "description": "Get ancestor zones for a zone",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAncestorZonesForAZone"
      },
      "task": true
    },
    {
      "name": "getDescendantZonesForAZone",
      "summary": "Get descendant zones for a zone",
      "description": "Get descendant zones for a zone",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDescendantZonesForAZone"
      },
      "task": true
    },
    {
      "name": "mapNetworkElementsToSecurityZones",
      "summary": "Map network elements to security zones",
      "description": "Map network elements to security zones",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/mapNetworkElementsToSecurityZones"
      },
      "task": true
    },
    {
      "name": "getListOfSubPoliciesBindingsWithInputAndOrOutputInterfaces",
      "summary": "Get list of sub-policies (bindings) with input and/or output interfaces",
      "description": "Get list of sub-policies (bindings) with input and/or output interfaces",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getListOfSubPoliciesBindingsWithInputAndOrOutputInterfaces"
      },
      "task": true
    },
    {
      "name": "getPoliciesByRevision",
      "summary": "Get policies by revision",
      "description": "Get policies by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPoliciesByRevision"
      },
      "task": true
    },
    {
      "name": "getSubPoliciesBindingsByDevice",
      "summary": "Get sub-policies (bindings) by device",
      "description": "Get sub-policies (bindings) by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSubPoliciesBindingsByDevice"
      },
      "task": true
    },
    {
      "name": "getRulesByInputAndOutputInterfaces",
      "summary": "Get rules by input and output interfaces",
      "description": "Get rules by input and output interfaces",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesByInputAndOutputInterfaces"
      },
      "task": true
    },
    {
      "name": "getSubPoliciesBindingsByRevision",
      "summary": "Get sub-policies (bindings) by revision",
      "description": "Get sub-policies (bindings) by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSubPoliciesBindingsByRevision"
      },
      "task": true
    },
    {
      "name": "getPoliciesByDevice",
      "summary": "Get policies by device",
      "description": "Get policies by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPoliciesByDevice"
      },
      "task": true
    },
    {
      "name": "runPolicyAnalysisQuery",
      "summary": "Run Policy Analysis query",
      "description": "Run Policy Analysis query",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/runPolicyAnalysisQuery"
      },
      "task": true
    },
    {
      "name": "deleteSpecificRuleDocumentation",
      "summary": "Delete specific rule documentation",
      "description": "Delete specific rule documentation",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteSpecificRuleDocumentation"
      },
      "task": true
    },
    {
      "name": "getSpecificRuleDocumentation",
      "summary": "Get specific rule documentation",
      "description": "Get specific rule documentation",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificRuleDocumentation"
      },
      "task": true
    },
    {
      "name": "modifySpecificRuleDocumentation",
      "summary": "Modify specific rule documentation",
      "description": "Modify specific rule documentation",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifySpecificRuleDocumentation"
      },
      "task": true
    },
    {
      "name": "putRevisionsIdRulesRuleIdDocumentation",
      "summary": "Modify specific rule documentation",
      "description": "Modify specific rule documentation",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/putRevisionsIdRulesRuleIdDocumentation"
      },
      "task": true
    },
    {
      "name": "deleteRevisionsIdRulesRuleIdDocumentation",
      "summary": "Delete specific rule documentation",
      "description": "Delete specific rule documentation",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteRevisionsIdRulesRuleIdDocumentation"
      },
      "task": true
    },
    {
      "name": "getRevisionsIdRulesRuleIdDocumentation",
      "summary": "Get specific rule documentation",
      "description": "Get specific rule documentation",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRevisionsIdRulesRuleIdDocumentation"
      },
      "task": true
    },
    {
      "name": "getCleanupsResults",
      "summary": "Get cleanups results",
      "description": "Get cleanups results",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getCleanupsResults"
      },
      "task": true
    },
    {
      "name": "getTheSpecificObjectsOrRulesIdentifiedForTheCleanupResults",
      "summary": "Get the specific objects or rules identified for the cleanup results",
      "description": "Get the specific objects or rules identified for the cleanup results",
      "input": [
        {
          "name": "cleanupId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "cleanupId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTheSpecificObjectsOrRulesIdentifiedForTheCleanupResults"
      },
      "task": true
    },
    {
      "name": "getTheSpecificObjectsOrRulesIdentifiedForTheRiskResults",
      "summary": "Get the specific objects or rules identified for the risk results",
      "description": "Get the specific objects or rules identified for the risk results",
      "input": [
        {
          "name": "riskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "riskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTheSpecificObjectsOrRulesIdentifiedForTheRiskResults"
      },
      "task": true
    },
    {
      "name": "getCleanupsByDevice",
      "summary": "Get cleanups by device",
      "description": "Get cleanups by device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCleanupsByDevice"
      },
      "task": true
    },
    {
      "name": "getDevicesInRiskResults",
      "summary": "Get devices in risk results",
      "description": "Get devices in risk results",
      "input": [
        {
          "name": "riskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "riskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevicesInRiskResults"
      },
      "task": true
    },
    {
      "name": "getRisksResults",
      "summary": "Get risks results",
      "description": "Get risks results",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getRisksResults"
      },
      "task": true
    },
    {
      "name": "getShadowingRulesByDevice",
      "summary": "Get shadowing rules by device",
      "description": "Get shadowing rules by device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getShadowingRulesByDevice"
      },
      "task": true
    },
    {
      "name": "getDevicesInCleanupResults",
      "summary": "Get devices in cleanup results",
      "description": "Get devices in cleanup results",
      "input": [
        {
          "name": "cleanupId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "cleanupId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevicesInCleanupResults"
      },
      "task": true
    },
    {
      "name": "getRevisionsByDevice",
      "summary": "Get revisions by device",
      "description": "Get revisions by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRevisionsByDevice"
      },
      "task": true
    },
    {
      "name": "getSpecificRevision",
      "summary": "Get specific revision",
      "description": "Get specific revision",
      "input": [
        {
          "name": "revId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificRevision"
      },
      "task": true
    },
    {
      "name": "getLatestRevisionByDevice",
      "summary": "Get latest revision by device",
      "description": "Get latest revision by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getLatestRevisionByDevice"
      },
      "task": true
    },
    {
      "name": "getLastHitsForAllRulesByDevice",
      "summary": "Get last hits for all rules by device",
      "description": "Get last hits for all rules by device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getLastHitsForAllRulesByDevice"
      },
      "task": true
    },
    {
      "name": "getLastHitForASpecificRule",
      "summary": "Get last hit for a specific rule",
      "description": "Get last hit for a specific rule",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "ruleUid",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ruleUid",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getLastHitForASpecificRule"
      },
      "task": true
    },
    {
      "name": "getASpecificRule",
      "summary": "Get a specific rule",
      "description": "Get a specific rule",
      "input": [
        {
          "name": "ruleId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificRule"
      },
      "task": true
    },
    {
      "name": "getSpecificRule",
      "summary": "Get specific rule",
      "description": "Get specific rule",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificRule"
      },
      "task": true
    },
    {
      "name": "getRuleCountPerDevice",
      "summary": "Get rule count per device",
      "description": "Get rule count per device",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getRuleCountPerDevice"
      },
      "task": true
    },
    {
      "name": "getRevisionsRevisionIdRulesIds",
      "summary": "Get specific rule",
      "description": "Get specific rule",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRevisionsRevisionIdRulesIds"
      },
      "task": true
    },
    {
      "name": "getRulesByRevision",
      "summary": "Get rules by revision",
      "description": "Get rules by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesByRevision"
      },
      "task": true
    },
    {
      "name": "findRules",
      "summary": "Find rules",
      "description": "Find rules",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/findRules"
      },
      "task": true
    },
    {
      "name": "getRulesByDevice",
      "summary": "Get rules by device",
      "description": "Get rules by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesByDevice"
      },
      "task": true
    },
    {
      "name": "getServiceGroupsContainingSpecifiedServiceObjects",
      "summary": "Get service groups containing specified service objects",
      "description": "Get service groups containing specified service objects",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getServiceGroupsContainingSpecifiedServiceObjects"
      },
      "task": true
    },
    {
      "name": "getSpecificService",
      "summary": "Get specific service",
      "description": "Get specific service",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificService"
      },
      "task": true
    },
    {
      "name": "getDevicesDeviceIdServicesIds",
      "summary": "Get specific service",
      "description": "Get specific service",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevicesDeviceIdServicesIds"
      },
      "task": true
    },
    {
      "name": "getRulesContainingSpecifiedServiceObject",
      "summary": "Get rules containing specified service object",
      "description": "Get rules containing specified service object",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesContainingSpecifiedServiceObject"
      },
      "task": true
    },
    {
      "name": "getServicesByRevision",
      "summary": "Get services by revision",
      "description": "Get services by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getServicesByRevision"
      },
      "task": true
    },
    {
      "name": "getServicesObjectsMatchingSpecifiedCriteria",
      "summary": "Get services objects matching specified criteria",
      "description": "Get services objects matching specified criteria",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getServicesObjectsMatchingSpecifiedCriteria"
      },
      "task": true
    },
    {
      "name": "getServicesByDevice",
      "summary": "Get services by device",
      "description": "Get services by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getServicesByDevice"
      },
      "task": true
    },
    {
      "name": "getTimeObjectsByRevision",
      "summary": "Get time objects by revision",
      "description": "Get time objects by revision",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTimeObjectsByRevision"
      },
      "task": true
    },
    {
      "name": "getTimeObjectsByDevice",
      "summary": "Get time objects by device",
      "description": "Get time objects by device",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTimeObjectsByDevice"
      },
      "task": true
    },
    {
      "name": "getSpecificTimeObject",
      "summary": "Get specific time object",
      "description": "Get specific time object",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificTimeObject"
      },
      "task": true
    },
    {
      "name": "getPolicyRelevanceMetricsForTraffic",
      "summary": "Get policy relevance metrics for traffic",
      "description": "Get policy relevance metrics for traffic",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPolicyRelevanceMetricsForTraffic"
      },
      "task": true
    },
    {
      "name": "startATaskToCalculateViolationsForAnAccessRequest",
      "summary": "Start a task to calculate violations for an access request",
      "description": "Start a task to calculate violations for an access request",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/startATaskToCalculateViolationsForAnAccessRequest"
      },
      "task": true
    },
    {
      "name": "getViolationTaskResults",
      "summary": "Get violation task results",
      "description": "Get violation task results",
      "input": [
        {
          "name": "taskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "taskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getViolationTaskResults"
      },
      "task": true
    },
    {
      "name": "getViolationTaskStatus",
      "summary": "Get violation task status",
      "description": "Get violation task status",
      "input": [
        {
          "name": "taskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "taskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getViolationTaskStatus"
      },
      "task": true
    },
    {
      "name": "cancelViolationTask",
      "summary": "Cancel violation task",
      "description": "Cancel violation task",
      "input": [
        {
          "name": "taskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "taskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/cancelViolationTask"
      },
      "task": true
    },
    {
      "name": "getViolationsForAnAccessRequest",
      "summary": "Get violations for an access request",
      "description": "Get violations for an access request",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getViolationsForAnAccessRequest"
      },
      "task": true
    },
    {
      "name": "deleteAlertsByIds",
      "summary": "Delete alerts by ids",
      "description": "Delete alerts by ids",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteAlertsByIds"
      },
      "task": true
    },
    {
      "name": "getASpecificAlert",
      "summary": "Get a specific alert",
      "description": "Get a specific alert",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificAlert"
      },
      "task": true
    },
    {
      "name": "updateAnAlert",
      "summary": "Update an alert",
      "description": "Update an alert",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateAnAlert"
      },
      "task": true
    },
    {
      "name": "createAnAlert",
      "summary": "Create an alert",
      "description": "Create an alert",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAnAlert"
      },
      "task": true
    },
    {
      "name": "getAlerts",
      "summary": "Get alerts",
      "description": "Get alerts",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getAlerts"
      },
      "task": true
    },
    {
      "name": "deleteCloudTagPolicy",
      "summary": "Delete cloud tag policy",
      "description": "Delete cloud tag policy",
      "input": [
        {
          "name": "policyId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "policyId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteCloudTagPolicy"
      },
      "task": true
    },
    {
      "name": "replaceACloudTagPolicy",
      "summary": "Replace a cloud tag policy",
      "description": "Replace a cloud tag policy",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "PUT body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "policyId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "policyId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/replaceACloudTagPolicy"
      },
      "task": true
    },
    {
      "name": "modifyACloudTagPolicy",
      "summary": "Modify a cloud tag policy",
      "description": "Modify a cloud tag policy",
      "input": [
        {
          "name": "policyId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "policyId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifyACloudTagPolicy"
      },
      "task": true
    },
    {
      "name": "getCloudTagPolicy",
      "summary": "Get cloud tag policy",
      "description": "Get cloud tag policy",
      "input": [
        {
          "name": "policyId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "policyId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCloudTagPolicy"
      },
      "task": true
    },
    {
      "name": "checkIfTagsAreCompliantWithCloudTagPolicies",
      "summary": "Check if tags are compliant with cloud tag policies",
      "description": "Check if tags are compliant with cloud tag policies",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/checkIfTagsAreCompliantWithCloudTagPolicies"
      },
      "task": true
    },
    {
      "name": "getAllCloudTagPolicies",
      "summary": "Get all cloud tag policies",
      "description": "Get all cloud tag policies",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getAllCloudTagPolicies"
      },
      "task": true
    },
    {
      "name": "createACloudTagPolicy",
      "summary": "Create a cloud tag policy",
      "description": "Create a cloud tag policy",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createACloudTagPolicy"
      },
      "task": true
    },
    {
      "name": "getAllCloudTagPolicyViolationsForAVPC",
      "summary": "Get all cloud tag policy violations for a VPC",
      "description": "Get all cloud tag policy violations for a VPC",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getAllCloudTagPolicyViolationsForAVPC"
      },
      "task": true
    },
    {
      "name": "startATaskToCalculateMatchingRulesForAnException",
      "summary": "Start a task to calculate matching rules for an exception",
      "description": "Start a task to calculate matching rules for an exception",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "exceptionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "exceptionId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/startATaskToCalculateMatchingRulesForAnException"
      },
      "task": true
    },
    {
      "name": "getMatchingRulesTaskStatus",
      "summary": "Get matching rules task status",
      "description": "Get matching rules task status",
      "input": [
        {
          "name": "taskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "taskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getMatchingRulesTaskStatus"
      },
      "task": true
    },
    {
      "name": "deleteAnException",
      "summary": "Delete an exception",
      "description": "Delete an exception",
      "input": [
        {
          "name": "exceptionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "exceptionId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteAnException"
      },
      "task": true
    },
    {
      "name": "getASpecificException",
      "summary": "Get a specific exception",
      "description": "Get a specific exception",
      "input": [
        {
          "name": "exceptionId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "exceptionId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificException"
      },
      "task": true
    },
    {
      "name": "cancelMatchingRulesTask",
      "summary": "Cancel Matching rules task",
      "description": "Cancel Matching rules task",
      "input": [
        {
          "name": "taskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "taskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/cancelMatchingRulesTask"
      },
      "task": true
    },
    {
      "name": "getAllExceptions",
      "summary": "Get all exceptions",
      "description": "Get all exceptions",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getAllExceptions"
      },
      "task": true
    },
    {
      "name": "createAnException",
      "summary": "Create an exception",
      "description": "Create an exception",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAnException"
      },
      "task": true
    },
    {
      "name": "getMatchingRulesTaskResults",
      "summary": "Get matching rules task results",
      "description": "Get matching rules task results",
      "input": [
        {
          "name": "taskId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "taskId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getMatchingRulesTaskResults"
      },
      "task": true
    },
    {
      "name": "getGlobalUnifiedSecurityPolicies",
      "summary": "Get global unified security policies",
      "description": "Get global unified security policies",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getGlobalUnifiedSecurityPolicies"
      },
      "task": true
    },
    {
      "name": "getUnifiedSecurityPolicies",
      "summary": "Get unified security policies",
      "description": "Get unified security policies",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getUnifiedSecurityPolicies"
      },
      "task": true
    },
    {
      "name": "getUnifiedSecurityPolicyAsCSV",
      "summary": "Get unified security policy as CSV",
      "description": "Get unified security policy as CSV",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getUnifiedSecurityPolicyAsCSV"
      },
      "task": true
    },
    {
      "name": "deleteUnifiedSecurityPolicy",
      "summary": "Delete unified security policy",
      "description": "Delete unified security policy",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteUnifiedSecurityPolicy"
      },
      "task": true
    },
    {
      "name": "setManualDeviceMapping",
      "summary": "Set manual device mapping",
      "description": "Set manual device mapping",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "POST body parameter",
          "required": true,
          "schema": {
            "title": "body",
            "type": "object"
          }
        },
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/setManualDeviceMapping"
      },
      "task": true
    },
    {
      "name": "getTheAmountOfViolatingRulesForTheSpecifiedDevice",
      "summary": "Get the amount of violating rules for the specified device.",
      "description": "Get the amount of violating rules for the specified device.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTheAmountOfViolatingRulesForTheSpecifiedDevice"
      },
      "task": true
    },
    {
      "name": "getTheViolatingRulesForTheSpecifiedDevice",
      "summary": "Get the violating rules for the specified device.",
      "description": "Get the violating rules for the specified device.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": "path parameter",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTheViolatingRulesForTheSpecifiedDevice"
      },
      "task": true
    },
    {
      "name": "getSpecificAdditionalParameterIdentityQuery",
      "summary": "GetspecificadditionalparameteridentityQuery",
      "description": "Some firewall vendors use special fields in their security policy. For example: Palo Alto uses Tags, Security Profiles and Log Profiles and Fortinet uses NAT Pools and other NAT configurations. SecureTrack refers to these fields as \"Additional Parameters\". The additional parameters API retrieves the possible values of these fields. This API is currently supported for Palo Alto Networks firewalls and Fortinet devices managed by Fortimanager.",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificAdditionalParameterIdentityQuery"
      },
      "task": true
    },
    {
      "name": "getAURLCategoryQuery",
      "summary": "GetaURLCategory.Query",
      "description": "Fetches one or more URL Categories. This API is supported for Panorama in advanced mode and Panorama Device Groups.",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAURLCategoryQuery"
      },
      "task": true
    },
    {
      "name": "getAdditionalParametersIdentitiesByRevisionQuery",
      "summary": "getAdditionalParameters",
      "description": "Some firewall vendors use special fields in their security policy. For example: Palo Alto uses Tags, Security Profiles and Log Profiles and Fortinet uses NAT Pools and other NAT configurations. SecureTrack refers to these fields as \"Additional Parameters\". The additional parameters API retrieves the possible values of these fields. This API is currently supported for Palo Alto Networks firewalls and Fortinet devices managed by Fortimanager.",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAdditionalParametersIdentitiesByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getApplicationsIdentitiesByRevisionQuery",
      "summary": "GetapplicationsidentitiesbyrevisionQuery",
      "description": "Fetches list of applications defined in a revision given by ID. This API is currently supported for Palo Alto Networks firewalls. In Panorama NG, overrides property in returned ApplicationDTO will be set to true, if the application overrides an original value. The default value for get_total is false. For API calls that have pagination, set get_total to true on the first call. Use the value to returned in total to determine how many additional calls are required to retrieve all the desired resul...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getApplicationsIdentitiesByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getRevisionsRevisionIdApplicationsIdsQuery",
      "summary": "Fetches one or more applications",
      "description": "Fetches one or more applications defined by a revision ID and Application Id or comma separated applications ids list. This API is currently supported for Palo Alto Networks firewalls. In Panorama NG, overrides property in returned ApplicationDTO will be set to true, if the application overrides an original value.",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRevisionsRevisionIdApplicationsIdsQuery"
      },
      "task": true
    },
    {
      "name": "getApplicationIdentitiesByDeviceQuery",
      "summary": "GetapplicationidentitiesbydeviceQuery",
      "description": "Fetches list of applications defined on device given by ID. This API is currently supported for Palo Alto Networks firewalls. In Panorama NG, overrides property in returned ApplicationDTO will be set to true, if the application overrides an original value. The default value for get_total is false. For API calls that have pagination, set get_total to true on the first call. Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results. ...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getApplicationIdentitiesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getSpecificApplicationIdentityQuery",
      "summary": "GetgetSpecificApplication",
      "description": "Fetches one or more applications defined by a device ID and Application Id or comma separated applications ids list. This API is currently supported for Palo Alto Networks firewalls.  Note:  This API retrieves the information from the latest revision. In Panorama NG, overrides property in returned ApplicationDTO will be set to true, if the application overrides an original value.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificApplicationIdentityQuery"
      },
      "task": true
    },
    {
      "name": "determineIfChangesBetweenTwoRevisionsAreAuthorizedQuery",
      "summary": "DetermineifchangesbetweentworevisionsareauthorizedQuery",
      "description": "This API checks for unauthorized changes between any two versions of a firewall policy. The API returns authorized if and only if all traffic changes between the two versions were authorized by SecureChange tickets. The API returns unauthorized if there is at least one change that cannot be matched to a SecureChange ticket.  The API checks access that was granted (checked against access requests with action=Accept) as well as access that was removed (checked against access requests with action=D...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/determineIfChangesBetweenTwoRevisionsAreAuthorizedQuery"
      },
      "task": true
    },
    {
      "name": "getNameAndStatusForAllChangeWindowsQuery",
      "summary": "GetnameandstatusforallchangewindowsQuery",
      "description": "Retrieves a list of all change windows. For valid pagination, both  start  and  count  should be provided. Otherwise, pagination is turned off.  The default value for  get_total  is false. For API calls that have pagination, set  get_total  to true on the first call.  Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results.  To improve performance, omit or set  get_total  to false on any subsequent calls.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNameAndStatusForAllChangeWindowsQuery"
      },
      "task": true
    },
    {
      "name": "getSchedulingAndDeviceDetailsForASpecificChangeWindowQuery",
      "summary": "GetschedulinganddevicedetailsforaspecificchangewindowQuery",
      "description": "Retrieves scheduling and device details for a specific change window.",
      "input": [
        {
          "name": "uid",
          "type": "string",
          "info": "Change window uuid: string",
          "required": true,
          "schema": {
            "title": "uid",
            "type": "string"
          }
        },
        {
          "name": "taskId",
          "type": "number",
          "info": "Task Id: 123",
          "required": true,
          "schema": {
            "title": "taskId",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSchedulingAndDeviceDetailsForASpecificChangeWindowQuery"
      },
      "task": true
    },
    {
      "name": "getAListOfCompletedPolicyChangesForASpecificChangeWindowQuery",
      "summary": "GetalistofcompletedpolicychangesforaspecificchangewindowQuery",
      "description": "Retrieves a list of completed policy changes for a specific change window. For valid pagination, both  start  and  count  should be provided. Otherwise, pagination is turned off.  The default value for  get_total  is false. For API calls that have pagination, set  get_total  to true on the first call.  Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results.  To improve performance, omit or set  get_total  to false on any subsequ...(description truncated)",
      "input": [
        {
          "name": "uid",
          "type": "string",
          "info": "Change window uuid: string",
          "required": true,
          "schema": {
            "title": "uid",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAListOfCompletedPolicyChangesForASpecificChangeWindowQuery"
      },
      "task": true
    },
    {
      "name": "getDeviceZonesByRevisionQuery",
      "summary": "GetdevicezonesbyrevisionQuery",
      "description": "Returns a list of the zones for the specified Juniper, Stonesoft, Fortinet or Palo Alto Networks revision. Note: this API returns device zones, not Tufin zones.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDeviceZonesByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getNetworkInterfacesByRevisionQuery",
      "summary": "GetnetworkinterfacesbyrevisionQuery",
      "description": "Reflects static data from the running-config. For dynamic information see the /topology_interfaces API. This API is not applicable for Check Point.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkInterfacesByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getDeviceZonesByDeviceQuery",
      "summary": "GetdevicezonesbydeviceQuery",
      "description": "Returns a list of the zones for the specified Juniper, Stonesoft, Fortinet or Palo Alto Networks device. Note: this API returns device zones, not Tufin zones.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDeviceZonesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getZonesAndNetworkInterfacesThatParticipateInSubPoliciesQuery",
      "summary": "Getzonesandnetworkinterfacesthatparticipateinsub-policiesQuery",
      "description": "Get zones and network interfaces that participate in sub-policies",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getZonesAndNetworkInterfacesThatParticipateInSubPoliciesQuery"
      },
      "task": true
    },
    {
      "name": "getNetworkInterfacesByDeviceQuery",
      "summary": "GetnetworkinterfacesbydeviceQuery",
      "description": "Reflects static data from the running-config. For dynamic information see the /topology_interfaces API. This API is not applicable for Check Point.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkInterfacesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getDomainQuery",
      "summary": "GetdomainQuery",
      "description": "Get domain",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Domain id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDomainQuery"
      },
      "task": true
    },
    {
      "name": "getCiscoCryptographicMapsByRevisionQuery",
      "summary": "GetCiscocryptographicmapsbyrevisionQuery",
      "description": "Get Cisco cryptographic maps by revision",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCiscoCryptographicMapsByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getCiscoCryptographicMapsByDeviceQuery",
      "summary": "GetCiscocryptographicmapsbydeviceQuery",
      "description": "Get Cisco cryptographic maps by device",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCiscoCryptographicMapsByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getCiscoIPsecPolicyAndPeersQuery",
      "summary": "GetIpsecTunnelsForTopologyInterface",
      "description": "Get policy and peers defined on a Cisco crypto map which is applied to specific interface (provided through the outputInterfaceName parameter) in the running config. You can retrieve the interface names by calling the /devices/id/interfaces API.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCiscoIPsecPolicyAndPeersQuery"
      },
      "task": true
    },
    {
      "name": "getCheckPointVPNIPSecCommunitiesAndGatewaysQuery",
      "summary": "GetIpsecCommunitiesForManagementId",
      "description": "Get Check Point VPN (IPSec) Communities and gateways that partcipant in those communities. Works on clusters and gateways, not on management servers.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCheckPointVPNIPSecCommunitiesAndGatewaysQuery"
      },
      "task": true
    },
    {
      "name": "getLDAPEntryDetailsByDNQuery",
      "summary": "GetLDAPentrydetailsbyDNQuery",
      "description": "Returns the UID, DN and Name of a LDAP entry specified by the DN.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getLDAPEntryDetailsByDNQuery"
      },
      "task": true
    },
    {
      "name": "getLicense",
      "summary": "getLicense",
      "description": "Returns the list of licenses installed on the system with information about the unique identifier,  the issuing and expiration dates, the customer identifier, name and optionally the site identifier  as well as a list of SKU units (optional).  A single license can be chosen via its numeric identifier or by their type: 1 - full, 2 - audit and 3 - evaluation.  For more information on supported devices, supported models and virtual types please refer to 'Licensing TOS' section in the Tufin Knowledg...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "string",
          "info": "License identifier: string",
          "required": true,
          "schema": {
            "title": "id",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getLicense"
      },
      "task": true
    },
    {
      "name": "getLicenses",
      "summary": "getLicenses",
      "description": "Returns the list of licenses installed on the system with information about the unique identifier,  the issuing and expiration dates, the customer identifier, name and optionally the site identifier  as well as a list of SKU units (optional).  There are 3 types of licenses and at most one of each type can be installed on the system.  The types are: full, audit and evaluation. Only full licenses have SKU items with name, purchased  quantity, optionally expiration dates and attached devices.  For ...(description truncated)",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getLicenses"
      },
      "task": true
    },
    {
      "name": "getQueueSizeConfig",
      "summary": "getQueueSizeConfig",
      "description": "This API requires 'Super admin' privileges",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getQueueSizeConfig"
      },
      "task": true
    },
    {
      "name": "updateQueueMaxSize",
      "summary": "updateQueueMaxSize",
      "description": "This API requires 'Super admin' privileges",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "queue_size_config: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "queue_size_config"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateQueueMaxSize"
      },
      "task": true
    },
    {
      "name": "getTextualConfigurationByRevisionQuery",
      "summary": "GettextualconfigurationbyrevisionQuery",
      "description": "Returns textual configuration for the specified revision Id.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTextualConfigurationByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getDevicesQuery",
      "summary": "GetdevicesQuery",
      "description": "Returns the list of devices that are configured in SecureTrack, including the vendor, model, name, domain and device ID. The results can be sorted by ip, name, vendor and model. For more information on supported devices, supported models and virtual types please refer to 'Device and Revision Resources' section in the Tufin Knowledge Center .",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevicesQuery"
      },
      "task": true
    },
    {
      "name": "getSpecificDeviceQuery",
      "summary": "GetspecificdeviceQuery",
      "description": "Returns the vendor, model, name, domain and ID for the specified device. For more information on supported devices, supported models and virtual types please refer to 'Device and Revision Resources' section in the Tufin Knowledge Center .",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getTextualConfigurationByDeviceQuery",
      "summary": "GettextualconfigurationbydeviceQuery",
      "description": "Get latest revision of running configuration for a given device Id.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTextualConfigurationByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "abortTask",
      "summary": "abort",
      "description": "This API requires 'Super admin' privileges",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "Request body: object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/abortTask"
      },
      "task": true
    },
    {
      "name": "abortAllTasks",
      "summary": "abortAllTasks",
      "description": "This API requires 'Super admin' privileges",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "Request body: object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/abortAllTasks"
      },
      "task": true
    },
    {
      "name": "getWaitingTasks",
      "summary": "getWaitingTasks",
      "description": "This API requires 'Super admin' privileges",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getWaitingTasks"
      },
      "task": true
    },
    {
      "name": "getWaitingTasksForDevice",
      "summary": "getWaitingTasksForDevice",
      "description": "This API requires 'Super admin' privileges",
      "input": [
        {
          "name": "deviceId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getWaitingTasksForDevice"
      },
      "task": true
    },
    {
      "name": "updateOfflineDeviceQuery",
      "summary": "updateDevice",
      "description": "Device name should contain only Lower and upper case letters, digits, space, dot, backward slash, forward slash, underscore or one of the following signs: #@:;=!^()",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "Device to be updated: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "Device to be updated"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateOfflineDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getNATObjectsByRevisionQuery",
      "summary": "GetNATobjectsbyrevisionQuery",
      "description": "Fetches a list of NAT objects for a given revision Note: NAT objects are only relevant for Check Point management servers and Juniper Netscreen devices. The default value for get_total is false. For API calls that have pagination, set get_total to true on the first call. Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results. To improve performance, omit or set get_total to false on any subsequent calls.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Version ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNATObjectsByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getNATObjectsByDeviceQuery",
      "summary": "GetNATobjectsbydeviceQuery",
      "description": "Fetches a list of NAT objects defined on device given by device ID Note: NAT objects are only relevant for Check Point management servers and Juniper Netscreen devices. The default value for get_total is false. For API calls that have pagination, set get_total to true on the first call. Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results. To improve performance, omit or set get_total to false on any subsequent calls.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNATObjectsByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getNATRulesByDeviceQuery",
      "summary": "GetNATrulesbydeviceQuery",
      "description": "Fetches list of NAT rules for device given by device ID  input_interface and output_interface are not supported for Panorama running in Advanced management mode nat_stage is supported for Netscreen and JunOS nat_type is supported for FortiManager Note: For Check Point, NAT rules are available from the modules (not managements) Note: For Palo Alto, filtering NAT rules by interface is only available for firewall devices",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNATRulesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getNetworkObjectsByRevisionQuery",
      "summary": "GetnetworkobjectsbyrevisionQuery",
      "description": "Fetches list of network objects from specific revision The default value for get_total is false. For API calls that have pagination, set get_total to true on the first call. Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results. To improve performance, omit or set get_total to false on any subsequent calls. The show_members parameter is only relevant if type=group. If type=group, the returned results will also include full deta...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkObjectsByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getSpecificNetworkObjectsByRevisionQuery",
      "summary": "GetspecificnetworkobjectsbyrevisionQuery",
      "description": "Fetches a single or partial list of the network objects for a given revision. For group network objects, the returned results will also include full details of every group member. Set show_members=false to return only the name and ID of the members, and omit the full details of the group members.",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificNetworkObjectsByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getNetworkObjectsByDeviceQuery",
      "summary": "GetnetworkobjectsbydeviceQuery",
      "description": "Fetches list of network objects defined on device given by ID The default value for get_total is false. For API calls that have pagination, set get_total to true on the first call. Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results. To improve performance, omit or set get_total to false on any subsequent calls. The show_members parameter is only relevant if type=group. If type=group, the returned results will also include fu...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkObjectsByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getSpecificNetworkObjectQuery",
      "summary": "GetspecificnetworkobjectQuery",
      "description": "Fetches a single or partial list of the network objects for a given device ID. For group network objects, the returned results will also include full details of every group member. Set show_members=false to return only the name and ID of the members, and omit the full details of the group members.  Note:  This API retrieves the information from the latest revision.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificNetworkObjectQuery"
      },
      "task": true
    },
    {
      "name": "getNetworkObjectsMatchingSpecifiedCriteriaQuery",
      "summary": "GetnetworkobjectsmatchingspecifiedcriteriaQuery",
      "description": "You can search for network objects where the IP address, name or comment fields have a specified text string, or you can search for network objects that have an IP address that matches, contains or is contained in a specified IP subnet, or you can search for network objects by uid.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkObjectsMatchingSpecifiedCriteriaQuery"
      },
      "task": true
    },
    {
      "name": "getNetworkGroupsContainingSpecifiedNetworkObjectQuery",
      "summary": "GetnetworkgroupscontainingspecifiednetworkobjectQuery",
      "description": "Returns groups that contain the specified network object",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The SecureTrack object ID of the network object.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getNetworkGroupsContainingSpecifiedNetworkObjectQuery"
      },
      "task": true
    },
    {
      "name": "getRulesContainingSpecifiedNetworkObjectQuery",
      "summary": "GetrulescontainingspecifiednetworkobjectQuery",
      "description": "Returns the security rules that contain the specified network object",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The SecureTrack object ID of the network object.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesContainingSpecifiedNetworkObjectQuery"
      },
      "task": true
    },
    {
      "name": "getTopologyGenericVPNConnectionsQuery",
      "summary": "GettopologygenericVPNconnectionsQuery",
      "description": "Returns a list of the generic vpn connections in the Topology map, for all the domains for which the user has permission to access. This API requires either 'Super admin' or 'Multi-Domain admin' privileges. For users with 'Super admin' permission, the context parameter is optional. If a context is not specified, the Global context will be used. For users with 'Multi-Domain' privilege, the context parameter is required. To get the context parameter, call the /domains/ API and use the id included ...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTopologyGenericVPNConnectionsQuery"
      },
      "task": true
    },
    {
      "name": "updateACloudQuery",
      "summary": "UpdateacloudQuery",
      "description": "Modify the name of a topology cloud, and add/remove members of a joined cloud. This API requires either 'Super admin' or 'Multi-Domain admin' privileges. Multi-Domain user must have access permission to the domain context of the joined cloud, and any members specified in the body. To change the name of a topology cloud, enter a value in the name field of the body. To add/remove members of a joined cloud, specify the action and specify the clouds in the members list of the body. The action is use...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "cloud id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "Cloud data: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "Cloud data"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateACloudQuery"
      },
      "task": true
    },
    {
      "name": "synchronizeTheTopologyModelQuery",
      "summary": "SynchronizetheTopologymodelQuery",
      "description": "Invoke of the Topology Model Synchronization. full_sync=false - Builds the topology model from the information stored in the Tufin database. full_sync=true - Retrieves the current data from devices and builds the topology model. Default value for full_sync = false.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/synchronizeTheTopologyModelQuery"
      },
      "task": true
    },
    {
      "name": "getSynchronizerCronTabDetails",
      "summary": "getSynchronizerCronTabDetails",
      "description": "get cronTab expression of the task scheduler",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getSynchronizerCronTabDetails"
      },
      "task": true
    },
    {
      "name": "getPathPdf",
      "summary": "getPathPdf",
      "description": "Returns an pdf report containing one or more paths for the specified traffic. src and dst parameters may be \"any\" or contain multiple, comma separated values as following: 1. Host / subnet ip address, either ipv4 or ipv6 (for example: \"1.2.3.4\", \"5.6.7.0:24\", \"8.9.0.0:255.255.0.0\", \"2222::1:128\") 2. Device network object name (for example: \"netobj:422:net_22.22.22.0\" refers to network object named \"net_22.22.22.0\" related to device with id 422) 3. LDAP Group (for example: \"LDAP:cn=grp1:cn=users:...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPathPdf"
      },
      "task": true
    },
    {
      "name": "getPathDomains",
      "summary": "getPathDomains",
      "description": "Returns one or more domain entries for the specified traffic. src and dst parameters may be \"any\" or contain multiple, comma separated values as following: 1. Host / subnet ip address, either ipv4 or ipv6 (for example: \"1.2.3.4\", \"5.6.7.0:24\", \"8.9.0.0:255.255.0.0\", \"2222::1:128\") 2. Device network object name (for example: \"netobj:422:net_22.22.22.0\" refers to network object named \"net_22.22.22.0\" related to device with id 422) 3. LDAP Group (for example: \"LDAP:cn=grp1:cn=users:dc=tcse:dc=net\")...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPathDomains"
      },
      "task": true
    },
    {
      "name": "getPathObjectTraffic",
      "summary": "getPathObjectTraffic",
      "description": "Returns all rolled traffic from any object in the path. src and dst parameters may be \"any\" or contain multiple, comma separated values as following: 1. Host / subnet ip address, either ipv4 or ipv6 (for example: \"1.2.3.4\", \"5.6.7.0:24\", \"8.9.0.0:255.255.0.0\", \"2222::1:128\") 2. Device network object name (for example: \"netobj:422:net_22.22.22.0\" refers to network object named \"net_22.22.22.0\" related to device with id 422) 3. LDAP Group (for example: \"LDAP:cn=grp1:cn=users:dc=tcse:dc=net\") 4. NS...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPathObjectTraffic"
      },
      "task": true
    },
    {
      "name": "getPathImageForSpecifiedTrafficQuery",
      "summary": "GetpathimageforspecifiedtrafficQuery",
      "description": "Returns an image containing one or more paths for the specified traffic. src and dst parameters may be \"any\" or contain multiple, comma separated values as following: 1. Host / subnet ip address, either ipv4 or ipv6 (for example: \"1.2.3.4\", \"5.6.7.0:24\", \"8.9.0.0:255.255.0.0\", \"2222::1:128\") 2. Device network object name (for example: \"netobj:422:net_22.22.22.0\" refers to network object named \"net_22.22.22.0\" related to device with id 422) 3. LDAP Group (for example: \"LDAP:cn=grp1:cn=users:dc=tc...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPathImageForSpecifiedTrafficQuery"
      },
      "task": true
    },
    {
      "name": "getPathForSpecifiedTrafficQuery",
      "summary": "GetpathforspecifiedtrafficQuery",
      "description": "Returns one or more paths for the specified traffic. src and dst parameters may be \"any\" or contain multiple, comma separated values as following: 1. Host / subnet ip address, either ipv4 or ipv6 (for example: \"1.2.3.4\", \"5.6.7.0:24\", \"8.9.0.0:255.255.0.0\", \"2222::1:128\") 2. Device network object name (for example: \"netobj:422:net_22.22.22.0\" refers to network object named \"net_22.22.22.0\" related to device with id 422) 3. LDAP Group (for example: \"LDAP:cn=grp1:cn=users:dc=tcse:dc=net\") 4. NSX s...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPathForSpecifiedTrafficQuery"
      },
      "task": true
    },
    {
      "name": "getTopologyCloudsQuery",
      "summary": "GettopologycloudsQuery",
      "description": "Returns a list of the topology clouds for all the domains for which the user has permission to access. This API requires either 'Super admin' or 'Multi-Domain admin' privileges. For users with 'Super admin' permission, the context parameter is optional. If a context is not specified, the Global context will be used. For users with 'Multi-Domain' privilege, the context parameter is required. To get the context parameter, call the /domains/ API and use the id included in the returned domain DTO. U...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTopologyCloudsQuery"
      },
      "task": true
    },
    {
      "name": "createAJoinedTopologyCloudQuery",
      "summary": "CreateajoinedtopologycloudQuery",
      "description": "Create a new topology cloud in the Interactive Map by joining existing clouds together. This API requires either 'Super admin' or 'Multi-Domain admin' privileges. For users with 'Super admin' permission, the context parameter is optional. If a context is not specified, the Global context will be used. For users with 'Multi-Domain' privilege, the context parameter is required. To get the context parameter, call the /domains/ API and use the id included in the returned domain DTO. The body must in...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "Cloud data: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "Cloud data"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAJoinedTopologyCloudQuery"
      },
      "task": true
    },
    {
      "name": "getTopologySubnetsQuery",
      "summary": "GettopologysubnetsQuery",
      "description": "Returns a list of the topology subnets for all the domains for which the user has permission to access. This API requires either 'Super admin' or 'Multi-Domain admin' privileges. For users with 'Super admin' permission, the context parameter is optional. If a context is not specified, the Global context will be used. For users with 'Multi-Domain' privilege, the context parameter is required. To get the context parameter, call the /domains/ API and use the id included in the returned domain DTO. ...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTopologySubnetsQuery"
      },
      "task": true
    },
    {
      "name": "getget",
      "summary": "Getget",
      "description": "Get Join Cloud by Id.",
      "input": [
        {
          "name": "cloudId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "cloudId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getget"
      },
      "task": true
    },
    {
      "name": "deletedelete",
      "summary": "Deletedelete",
      "description": "Delete Join Cloud by Id.",
      "input": [
        {
          "name": "cloudId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "cloudId",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deletedelete"
      },
      "task": true
    },
    {
      "name": "createJoinCloud",
      "summary": "Create Join Cloud",
      "description": "Create Join Cloud.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "request body: object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createJoinCloud"
      },
      "task": true
    },
    {
      "name": "updateJoinClouds",
      "summary": "update join clouds",
      "description": "Update Join Clouds.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "Request Body: object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateJoinClouds"
      },
      "task": true
    },
    {
      "name": "getVpn",
      "summary": "getVpn",
      "description": "Get a generic Vpn by Id.",
      "input": [
        {
          "name": "vpnId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "vpnId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getVpn"
      },
      "task": true
    },
    {
      "name": "deleteVpn",
      "summary": "deleteVpn",
      "description": "Delete a generic Vpn by Id.",
      "input": [
        {
          "name": "vpnId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "vpnId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteVpn"
      },
      "task": true
    },
    {
      "name": "getInterface",
      "summary": "getInterface",
      "description": "Get a generic Interface by Id.",
      "input": [
        {
          "name": "inId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "inId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getInterface"
      },
      "task": true
    },
    {
      "name": "deleteInterface",
      "summary": "deleteInterface",
      "description": "Delete a generic Interface by Id.",
      "input": [
        {
          "name": "inId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "inId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteInterface"
      },
      "task": true
    },
    {
      "name": "getRoute",
      "summary": "getRoute",
      "description": "Get a generic Route by Id.",
      "input": [
        {
          "name": "routeId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "routeId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRoute"
      },
      "task": true
    },
    {
      "name": "deleteRoute",
      "summary": "deleteRoute",
      "description": "Delete a generic Route by Id.",
      "input": [
        {
          "name": "routeId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "routeId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteRoute"
      },
      "task": true
    },
    {
      "name": "createRoutes",
      "summary": "createRoutes",
      "description": "Create generic Routes.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "Requset Body: object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createRoutes"
      },
      "task": true
    },
    {
      "name": "updateRoutes",
      "summary": "updateRoutes",
      "description": "Update generic Routes.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateRoutes"
      },
      "task": true
    },
    {
      "name": "getRoutes",
      "summary": "getRoutes",
      "description": "Get generic Routes of management Id.",
      "input": [
        {
          "name": "mgmtId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "mgmtId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRoutes"
      },
      "task": true
    },
    {
      "name": "deleteRoutes",
      "summary": "deleteRoutes",
      "description": "Delete all generic Routes from management Id.",
      "input": [
        {
          "name": "mgmtId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "mgmtId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteRoutes"
      },
      "task": true
    },
    {
      "name": "getInterfaceCustomer",
      "summary": "getInterfaceCustomer",
      "description": "Get manual Interface CustomerTag by Id.",
      "input": [
        {
          "name": "interfaceCustomerId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "interfaceCustomerId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getInterfaceCustomer"
      },
      "task": true
    },
    {
      "name": "deleteInterfaceCustomer",
      "summary": "deleteInterfaceCustomer",
      "description": "Delete a manual Interface CustomerTag by Id.",
      "input": [
        {
          "name": "interfaceCustomerId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "interfaceCustomerId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteInterfaceCustomer"
      },
      "task": true
    },
    {
      "name": "getInterfaceCustomers",
      "summary": "getInterfaceCustomers",
      "description": "Get manual Interface CustomerTags of management/genericDevice Id.",
      "input": [
        {
          "name": "deviceId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getInterfaceCustomers"
      },
      "task": true
    },
    {
      "name": "deleteInterfaceCustomers",
      "summary": "deleteInterfaceCustomers",
      "description": "Delete all manual Interface CustomerTags from management/genericDevice Id.",
      "input": [
        {
          "name": "deviceId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteInterfaceCustomers"
      },
      "task": true
    },
    {
      "name": "createInterfaceCustomers",
      "summary": "createInterfaceCustomers",
      "description": "Create manual Interface CustomerTags.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createInterfaceCustomers"
      },
      "task": true
    },
    {
      "name": "updateInterfaceCustomers",
      "summary": "updateInterfaceCustomers",
      "description": "Update manual Interface CustomerTags.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateInterfaceCustomers"
      },
      "task": true
    },
    {
      "name": "getgetInterfaces",
      "summary": "GetgetInterfaces",
      "description": "Get generic Interfaces of management Id.",
      "input": [
        {
          "name": "mgmtId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "mgmtId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getgetInterfaces"
      },
      "task": true
    },
    {
      "name": "deleteInterfaces",
      "summary": "deleteInterfaces",
      "description": "Delete all generic Interfaces from management Id.",
      "input": [
        {
          "name": "mgmtId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "mgmtId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteInterfaces"
      },
      "task": true
    },
    {
      "name": "createInterfaces",
      "summary": "createInterfaces",
      "description": "Create generic Interfaces.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createInterfaces"
      },
      "task": true
    },
    {
      "name": "updateInterfaces",
      "summary": "updateInterfaces",
      "description": "Update generic Interfaces.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateInterfaces"
      },
      "task": true
    },
    {
      "name": "getVpns",
      "summary": "getVpns",
      "description": "Get generic Vpns of management/genericDevice Id.",
      "input": [
        {
          "name": "deviceId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getVpns"
      },
      "task": true
    },
    {
      "name": "deleteVpns",
      "summary": "deleteVpns",
      "description": "Delete all generic Vpns from management/genericDevice Id.",
      "input": [
        {
          "name": "deviceId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteVpns"
      },
      "task": true
    },
    {
      "name": "createVpns",
      "summary": "createVpns",
      "description": "Create generic Vpns.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createVpns"
      },
      "task": true
    },
    {
      "name": "updateVpns",
      "summary": "updateVpns",
      "description": "Update generic Vpns.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateVpns"
      },
      "task": true
    },
    {
      "name": "getTransparentFirewalls",
      "summary": "getTransparentFirewalls",
      "description": "Get Transparent Firewalls for participated managed/generic DeviceId",
      "input": [
        {
          "name": "deviceId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTransparentFirewalls"
      },
      "task": true
    },
    {
      "name": "deleteTransparentFirewalls",
      "summary": "deleteTransparentFirewalls",
      "description": "Delete Transparent Firewalls for participated layer 2 deviceId",
      "input": [
        {
          "name": "deviceId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteTransparentFirewalls"
      },
      "task": true
    },
    {
      "name": "deleteTransparentFirewall",
      "summary": "deleteTransparentFirewall",
      "description": "Delete Transparent Firewall by Id.",
      "input": [
        {
          "name": "layer2DataId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "layer2DataId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteTransparentFirewall"
      },
      "task": true
    },
    {
      "name": "createTransparentFirewalls",
      "summary": "createTransparentFirewalls",
      "description": "Create Transparent Firewalls.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createTransparentFirewalls"
      },
      "task": true
    },
    {
      "name": "updateTransparentFirewalls",
      "summary": "updateTransparentFirewalls",
      "description": "Update Transparent Firewalls.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateTransparentFirewalls"
      },
      "task": true
    },
    {
      "name": "getIgnoredInterfaces",
      "summary": "getIgnoredInterfaces",
      "description": "Get Ignored Interfaces by management id.",
      "input": [
        {
          "name": "mgmtId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "mgmtId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getIgnoredInterfaces"
      },
      "task": true
    },
    {
      "name": "deleteIgnoredInterfaces",
      "summary": "deleteIgnoredInterfaces",
      "description": "Delete Ignored Interfaces by management id.",
      "input": [
        {
          "name": "mgmtId",
          "type": "number",
          "info": ": 123",
          "required": true,
          "schema": {
            "title": "mgmtId",
            "type": "number"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteIgnoredInterfaces"
      },
      "task": true
    },
    {
      "name": "createIgnoredInterfaces",
      "summary": "createIgnoredInterfaces",
      "description": "Create Ignored Interfaces.",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createIgnoredInterfaces"
      },
      "task": true
    },
    {
      "name": "deleteGenericDeviceFromTopologyModelQuery",
      "summary": "DeletegenericdevicefromTopologymodelQuery",
      "description": "Delete a generic device from the Topology model. The ID must be for a valid generic device listed in the Topology Model. If update update_topology = true, then the Topology model will be updated immediately after the device is deleted. For maximum efficiency, if you are deleting multiple generic devices in consecutive API calls, you can set update_topology = false on all API calls  except for the last one. On the last call, set update_toplogy = true. Default value for update_topology = true.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Generic device id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteGenericDeviceFromTopologyModelQuery"
      },
      "task": true
    },
    {
      "name": "getGenericDevicesThatAreConfiguredInSTQuery",
      "summary": "GetgenericdevicesthatareconfiguredinSTQuery",
      "description": "Returns a list of the generic devices included in all the domains that the user has permission to. Use context and/or name optional parameters to get more specific results. To get context optional parameter, you can call /domains/ API and use the id included within the returned domain DTO.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getGenericDevicesThatAreConfiguredInSTQuery"
      },
      "task": true
    },
    {
      "name": "getTopologyRoutingTablesForAGivenDeviceQuery",
      "summary": "GettopologyroutingtablesforagivendeviceQuery",
      "description": "The returned routing tables are taken from the topology data and will include only devices that are topology enabled. When adding a device, the user can can choose whether to use dynamic or static topology for the device, this choice will determine which kind of data is stored in the topology graph and returned by this API.  The parameter mgmtId should be a cluster or a gateway, not a management server. You may provide a generic device Id (see generic_devices API under 'Monitored Devices' catego...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTopologyRoutingTablesForAGivenDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getTopologyNetworkInterfacesByDeviceQuery",
      "summary": "GettopologynetworkinterfacesbydeviceQuery",
      "description": "The returned interfaces are taken from the topology data and will include only devices that are topology enabled. When adding a device, the user can can choose whether to use dynamic or static topology for the device, this choice will determine which kind of data is stored in the topology graph and returned by this API.  The parameter mgmtId should be a cluster or a gateway, not a management server. You may provide a generic device Id (see generic_devices API under 'Monitored Devices' category) ...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTopologyNetworkInterfacesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getMostSpecificNetworkInterfacesFromWhichAHostIPIsAccessibleQuery",
      "summary": "GetmostspecificnetworkinterfacesfromwhichahostIPisaccessibleQuery",
      "description": "Get most specific network interfaces from which a host IP is accessible",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getMostSpecificNetworkInterfacesFromWhichAHostIPIsAccessibleQuery"
      },
      "task": true
    },
    {
      "name": "joinOrSplitSubnet",
      "summary": "Join/Split Subnet.",
      "description": "Join/Split Subnet.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/joinOrSplitSubnet"
      },
      "task": true
    },
    {
      "name": "modifyAZoneEntryQuery",
      "summary": "PutModifyazoneentryQuery",
      "description": "For IPv4 entry provide IP and netmask/prefix (see Usage Example #1 and #2). For IPv6 provide IP and prefix only, netmask is not allowed(see Usage Example #3).",
      "input": [
        {
          "name": "zoneId",
          "type": "string",
          "info": "The ID of the zone containing the zone entry.: string",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "id",
          "type": "number",
          "info": "The ID of the zone entry.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "The modified zone entry.: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "The modified zone entry."
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifyAZoneEntryQuery"
      },
      "task": true
    },
    {
      "name": "getASpecificZoneEntryQuery",
      "summary": "getZoneEntry",
      "description": "Get a specific zone entry by ID for a zone.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The ID of the zone entry.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "zoneId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificZoneEntryQuery"
      },
      "task": true
    },
    {
      "name": "deleteZoneEntriesQuery",
      "summary": "deleteZoneEntry",
      "description": "Delete existing zone entries.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The ID of the zone entry to delete.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "zoneId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteZoneEntriesQuery"
      },
      "task": true
    },
    {
      "name": "createAZoneEntryQuery",
      "summary": "addZoneEntry",
      "description": "For IPv4 entry provide IP and netmask/prefix (see Usage Example #1 and #2). For IPv6 provide IP and prefix only, netmask is not allowed(see Usage Example #3).",
      "input": [
        {
          "name": "zoneId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "The zone entry to create.: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "The zone entry to create."
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAZoneEntryQuery"
      },
      "task": true
    },
    {
      "name": "deleteZonesZoneIdsEntriesIdsQuery",
      "summary": "deleteZoneEntries",
      "description": "Modify an existing zone entry.",
      "input": [
        {
          "name": "zoneIds",
          "type": "string",
          "info": "The ID(s) of the zones containing the zone entry.: string",
          "required": true,
          "schema": {
            "title": "zoneIds",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteZonesZoneIdsEntriesIdsQuery"
      },
      "task": true
    },
    {
      "name": "modifyMultipleExistingZoneEntriesQuery",
      "summary": "editZoneEntries",
      "description": "For IPv4 entry provide IP and netmask/prefix. For IPv6 provide IP and prefix only, netmask is not allowed. new_zone_id is not optional, it may be the same as the present zoneId.",
      "input": [
        {
          "name": "zoneIds",
          "type": "string",
          "info": "The ID(s) of the zones containing the zone entries.: string",
          "required": true,
          "schema": {
            "title": "zoneIds",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifyMultipleExistingZoneEntriesQuery"
      },
      "task": true
    },
    {
      "name": "getEntriesForAZoneQuery",
      "summary": "getZoneEntries",
      "description": "Get the list of zone entries for a zone.",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getEntriesForAZoneQuery"
      },
      "task": true
    },
    {
      "name": "getASpecificZoneQuery",
      "summary": "GetaspecificzoneQuery",
      "description": "Get the zone with the specified ID.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The ID of the zone to get.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificZoneQuery"
      },
      "task": true
    },
    {
      "name": "modifyAZoneQuery",
      "summary": "ModifyazoneQuery",
      "description": "Modify an existing zone.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The ID of the zone to modify.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifyAZoneQuery"
      },
      "task": true
    },
    {
      "name": "getAllZonesQuery",
      "summary": "GetallzonesQuery",
      "description": "Gets a list of all zones.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAllZonesQuery"
      },
      "task": true
    },
    {
      "name": "createAZoneQuery",
      "summary": "CreateazoneQuery",
      "description": "Create a zone.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "The zone to add.: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "The zone to add."
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAZoneQuery"
      },
      "task": true
    },
    {
      "name": "deleteAllZonesQuery",
      "summary": "DeleteallzonesQuery",
      "description": "Delete all existing zones.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteAllZonesQuery"
      },
      "task": true
    },
    {
      "name": "getSharedZonesQuery",
      "summary": "GetsharedzonesQuery",
      "description": "Get a list of shared zones.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSharedZonesQuery"
      },
      "task": true
    },
    {
      "name": "getConfigurationUsagesForAZoneQuery",
      "summary": "getZoneDependencies",
      "description": "Get a list of configuration usages for the specified zone(s).",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getConfigurationUsagesForAZoneQuery"
      },
      "task": true
    },
    {
      "name": "getDescendantZonesForAZoneQuery",
      "summary": "getChildrenHierarchy",
      "description": "Get a list of zones descended from the specified zone(s).",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDescendantZonesForAZoneQuery"
      },
      "task": true
    },
    {
      "name": "getAncestorZonesForAZoneQuery",
      "summary": "getParentsHierarchy",
      "description": "Get a list of ancestor zones for the specified zone(s).",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAncestorZonesForAZoneQuery"
      },
      "task": true
    },
    {
      "name": "addAZoneAsADescendantToAZoneQuery",
      "summary": "addContainedZone",
      "description": "Add a zone(s) as a descendant to a existing zone.",
      "input": [
        {
          "name": "parentId",
          "type": "number",
          "info": "The ID of the zone for which to add descendant zone(s).: 123",
          "required": true,
          "schema": {
            "title": "parentId",
            "type": "number"
          }
        },
        {
          "name": "childIds",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "childIds",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addAZoneAsADescendantToAZoneQuery"
      },
      "task": true
    },
    {
      "name": "removeAZoneAsAnDescendantsToAZoneQuery",
      "summary": "deleteContainedZone",
      "description": "Remove a zone(s) as an descendants to a existing zone.",
      "input": [
        {
          "name": "parentId",
          "type": "number",
          "info": "The ID of the zone for which to remove descendant zone(s).: 123",
          "required": true,
          "schema": {
            "title": "parentId",
            "type": "number"
          }
        },
        {
          "name": "childIds",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "childIds",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/removeAZoneAsAnDescendantsToAZoneQuery"
      },
      "task": true
    },
    {
      "name": "addAZoneAsAnAncestorToAZoneQuery",
      "summary": "addToZone",
      "description": "Add a zone(s) as an ancestor to a existing zone.",
      "input": [
        {
          "name": "childId",
          "type": "number",
          "info": "The ID of the zone for which to add ancestors zone(s).: 123",
          "required": true,
          "schema": {
            "title": "childId",
            "type": "number"
          }
        },
        {
          "name": "parentIds",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "parentIds",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addAZoneAsAnAncestorToAZoneQuery"
      },
      "task": true
    },
    {
      "name": "removeAZoneAsAnAncestorToAZoneQuery",
      "summary": "deleteFromZone",
      "description": "Remove a zone(s) as an ancestor to a existing zone.",
      "input": [
        {
          "name": "childId",
          "type": "number",
          "info": "The ID of the zone for which to remove ancestors zone(s).: 123",
          "required": true,
          "schema": {
            "title": "childId",
            "type": "number"
          }
        },
        {
          "name": "parentIds",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "parentIds",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/removeAZoneAsAnAncestorToAZoneQuery"
      },
      "task": true
    },
    {
      "name": "deleteAZoneQuery",
      "summary": "deleteZones",
      "description": "Delete an existing zone.",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteAZoneQuery"
      },
      "task": true
    },
    {
      "name": "importAZoneQuery",
      "summary": "importZones",
      "description": "Import a shared zone into the specified domain",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/importAZoneQuery"
      },
      "task": true
    },
    {
      "name": "getPoliciesByRevisionQuery",
      "summary": "GetpoliciesbyrevisionQuery",
      "description": "Fetches list of policies defined on a given revision ID",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPoliciesByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getSubPoliciesBindingsByRevisionQuery",
      "summary": "Getsub-policies(bindings)byrevisionQuery",
      "description": "Returns a list of all of the subpolicies (bindings) for a given revision. The definition of subpolicy is different for each vendor: Check Point - policy package and inline layer (inline layer will be returned only when the optional include_subpolicy parameter is set to true) Cisco - ACL Juniper/Fortinet/Palo Alto/Stonesoft - zone-to-zone policy Cloud platforms - Security Groups",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSubPoliciesBindingsByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getPoliciesByDeviceQuery",
      "summary": "GetpoliciesbydeviceQuery",
      "description": "Fetches list of policies defined on a given device ID.  Supported devices: CheckPoint, Panorama Advanced, FortiManager Basic and Advanced, FMC and NSX.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPoliciesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getSubPoliciesBindingsByDeviceQuery",
      "summary": "Getsub-policies(bindings)bydeviceQuery",
      "description": "Returns a list of all of the subpolicies (bindings) for a given device. The definition of subpolicy is different for each vendor: Check Point - policy package and inline layer (inline layer will be returned only when the optional include_subpolicy parameter is set to true) Cisco - ACL Juniper/Fortinet/Palo Alto/Stonesoft - zone-to-zone policy Cloud platforms - Security Groups",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSubPoliciesBindingsByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getRulesByInputAndOutputInterfacesQuery",
      "summary": "getBindingsForTopologyInterfaces",
      "description": "Get rules by input and output interfaces",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesByInputAndOutputInterfacesQuery"
      },
      "task": true
    },
    {
      "name": "getListOfSubPoliciesBindingsWithInputAndOrOutputInterfacesQuery",
      "summary": "getLastInstalledVersionBindingsByVersionId",
      "description": "Retrieve list of bindings of input and/or output interfaces",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getListOfSubPoliciesBindingsWithInputAndOrOutputInterfacesQuery"
      },
      "task": true
    },
    {
      "name": "runPolicyAnalysisQueryQuery",
      "summary": "RunPolicyAnalysisqueryQuery",
      "description": "Run Policy Analysis query",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/runPolicyAnalysisQueryQuery"
      },
      "task": true
    },
    {
      "name": "getRisksResultsQuery",
      "summary": "GetrisksresultsQuery",
      "description": "Get risks results",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRisksResultsQuery"
      },
      "task": true
    },
    {
      "name": "getCleanupsResultsQuery",
      "summary": "GetcleanupsresultsQuery",
      "description": "Get cleanups results",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCleanupsResultsQuery"
      },
      "task": true
    },
    {
      "name": "getTheSpecificObjectsOrRulesIdentifiedForTheRiskResultsQuery",
      "summary": "getRiskInstances",
      "description": "Get the specific objects or rules identified for the risk results",
      "input": [
        {
          "name": "riskId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "riskId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTheSpecificObjectsOrRulesIdentifiedForTheRiskResultsQuery"
      },
      "task": true
    },
    {
      "name": "getDevicesInRiskResultsQuery",
      "summary": "getRiskDevices",
      "description": "Get devices in risk results",
      "input": [
        {
          "name": "riskId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "riskId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevicesInRiskResultsQuery"
      },
      "task": true
    },
    {
      "name": "getTheSpecificObjectsOrRulesIdentifiedForTheCleanupResultsQuery",
      "summary": "getCleanupInstances",
      "description": "Get the specific objects or rules identified for the cleanup results",
      "input": [
        {
          "name": "cleanupId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "cleanupId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTheSpecificObjectsOrRulesIdentifiedForTheCleanupResultsQuery"
      },
      "task": true
    },
    {
      "name": "getDevicesInCleanupResultsQuery",
      "summary": "getCleanupDevices",
      "description": "Get devices in cleanup results",
      "input": [
        {
          "name": "cleanupId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "cleanupId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevicesInCleanupResultsQuery"
      },
      "task": true
    },
    {
      "name": "getCleanupsByDeviceQuery",
      "summary": "getCleanupInstanceResultAndInfo",
      "description": "Fetches set of Cleanup calculation results for a device given by ID. Only fully shadowed rules (cleanup code C01) are supported.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCleanupsByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getShadowingRulesByDeviceQuery",
      "summary": "getShadowingResultAndInfo",
      "description": "Find shadowing rules for given shadowed rules of a specific device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getShadowingRulesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getRevisionsByDeviceQuery",
      "summary": "GetrevisionsbydeviceQuery",
      "description": "Fetches revisions for a given device",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRevisionsByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getLatestRevisionByDeviceQuery",
      "summary": "GetlatestrevisionbydeviceQuery",
      "description": "Fetches latest revision for a given device",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getLatestRevisionByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getSpecificRevisionQuery",
      "summary": "getRevision",
      "description": "Fetches a revision specified by revision Id. To get revId for this API, use the 'id' property of RevisionDTO that is returned by 'Get revisions by device' or 'Get latest revision by device' APIs",
      "input": [
        {
          "name": "revId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getRuleCountPerDeviceQuery",
      "summary": "GetrulecountperdeviceQuery",
      "description": "The search_text parameter provides the same capabilities as the Policy Browser feature in SecureTrack. You can search for a string across all rule fields, or you can search for a combination of specific strings in specific fields. The text format is for a field is &lt;fieldname&gt;:&lt;text&gt; for example uid:9259f6ee-47a0-4996-a214-ab7edc14a916. See the search info documentation in Securetrack Policy Browser page for more information. This API will return a list of all the devices, the devices...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRuleCountPerDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getRulesByRevisionQuery",
      "summary": "GetrulesbyrevisionQuery",
      "description": "Returns a list of all of the security rules for the specified revision.  Use add=documentation to retrieve rule documentation.  The is_global parameter is device dependent. For ACL devices, only global rules are returned when set to true. For Check Point R80, only global layers are returned when set to true, and specify a layer name in the subpolicy_name parameter This parameter is ignored for all other vendors. The default value is false.  The subpolicy_name parameter is device dependent. For C...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getRevisionsRevisionIdRulesIdsQuery",
      "summary": "Returns a list of rules",
      "description": "Returns a list of rules by revision ID, rule IDs and additional criteria",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRevisionsRevisionIdRulesIdsQuery"
      },
      "task": true
    },
    {
      "name": "getRulesByDeviceQuery",
      "summary": "GetrulesbydeviceQuery",
      "description": "Returns a list of all of the security rules for the specified device.  Use add=documentation to retrieve rule documentation.  The is_global parameter is device dependent. For ACL devices, only global rules are returned when set to true. For Check Point R80, only global layers are returned when set to true, and specify a layer name in the subpolicy_name parameter This parameter is ignored for all other vendors. The default value is false.  The subpolicy_name parameter is device dependent. For Che...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getSpecificRuleQuery",
      "summary": "GetspecificruleQuery",
      "description": "Returns a list of rules by device ID, rule IDs and additional criteria.  Note:  This API retrieves the information from the latest revision.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificRuleQuery"
      },
      "task": true
    },
    {
      "name": "findRulesQuery",
      "summary": "findRules",
      "description": "The search_text parameter provides the same capabilities as the Policy Browser feature in SecureTrack. You can search for a string across all rule fields, or you can search for a combination of specific strings in specific fields. The text format is for a field is &lt;fieldname&gt;:&lt;text&gt; for example uid:9259f6ee-47a0-4996-a214-ab7edc14a916. See the search info documentation in Securetrack Policy Browser page for more information.To get more information regarding objects included in the re...(description truncated)",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/findRulesQuery"
      },
      "task": true
    },
    {
      "name": "getASpecificRuleQuery",
      "summary": "getRule",
      "description": "Get a specific rule",
      "input": [
        {
          "name": "ruleId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificRuleQuery"
      },
      "task": true
    },
    {
      "name": "getServiceGroupsContainingSpecifiedServiceObjectsQuery",
      "summary": "GetservicegroupscontainingspecifiedserviceobjectsQuery",
      "description": "Returns groups that contain the specified service objects",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The SecureTrack object ID of the service object.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getServiceGroupsContainingSpecifiedServiceObjectsQuery"
      },
      "task": true
    },
    {
      "name": "getRulesContainingSpecifiedServiceObjectQuery",
      "summary": "GetrulescontainingspecifiedserviceobjectQuery",
      "description": "Returns the security rules that contain the specified service object",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The SecureTrack object ID of the service object.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRulesContainingSpecifiedServiceObjectQuery"
      },
      "task": true
    },
    {
      "name": "getServicesByRevisionQuery",
      "summary": "GetservicesbyrevisionQuery",
      "description": "Fetches list of service objects defined in revision given by revision ID  The default value for get_total is false. For API calls that have pagination, set get_total to true on the first call. Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results. To improve performance, omit or set get_total to false on any subsequent calls.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getServicesByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getSpecificServiceQuery",
      "summary": "GetspecificserviceQuery",
      "description": "Fetches list of specific service objects defined in revision given by revision ID and specified by their IDs",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificServiceQuery"
      },
      "task": true
    },
    {
      "name": "getServicesByDeviceQuery",
      "summary": "GetservicesbydeviceQuery",
      "description": "Fetches list of service objects defined on device given by device ID. The default value for get_total is false. For APIF calls that have pagination, set get_total to true on the first call. Use the value to returned in total to determine how many additional calls are required to retrieve all the desired results. To improve performance, omit or set get_total to false on any subsequent calls.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getServicesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getDevicesDeviceIdServicesIdsQuery",
      "summary": "Fetches list of specific service objects",
      "description": "Fetches list of specific service objects defined in device given by device ID and specified by their IDs.  Note:  This API retrieves the information from the latest revision.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDevicesDeviceIdServicesIdsQuery"
      },
      "task": true
    },
    {
      "name": "getTimeObjectsByRevisionQuery",
      "summary": "GettimeobjectsbyrevisionQuery",
      "description": "Returns the time objects used in the specified revision.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTimeObjectsByRevisionQuery"
      },
      "task": true
    },
    {
      "name": "getSpecificTimeObjectQuery",
      "summary": "GetspecifictimeobjectQuery",
      "description": "Fetches list of time objects by revision ID and rule ID",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificTimeObjectQuery"
      },
      "task": true
    },
    {
      "name": "getTimeObjectsByDeviceQuery",
      "summary": "GettimeobjectsbydeviceQuery",
      "description": "Returns the time objects used in the specified device.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTimeObjectsByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getPolicyRelevanceMetricsForTrafficQuery",
      "summary": "GetpolicyrelevancemetricsfortrafficQuery",
      "description": "The response lists all the relevant security groups, tags, relevant instances, and count of unrelated instances for each Amazon VPC in the specified traffic path. A relevant security group contains at least one instance including either the source or destination IP address. An unrelated instance is included in the security group but not part of the specified traffic path. If context is provided, path will be calculated for the specified domain context, otherwise the default domain context is use...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "Relevance metrics request: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "Relevance metrics request"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPolicyRelevanceMetricsForTrafficQuery"
      },
      "task": true
    },
    {
      "name": "getViolationsForAnAccessRequestQuery",
      "summary": "GetviolationsforanaccessrequestQuery",
      "description": "Calculate the violations for the given access request. Note: this API may take a while to complete. See the asynchronous API /violations/access_request/task as an alternative.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "AccessRequestListDTO: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "AccessRequestListDTO"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getViolationsForAnAccessRequestQuery"
      },
      "task": true
    },
    {
      "name": "startATaskToCalculateViolationsForAnAccessRequestQuery",
      "summary": "StartatasktocalculateviolationsforanaccessrequestQuery",
      "description": "Create a calculation task to find access requests violations. Returns a task Id that can be used to check the task status and get the task results",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/startATaskToCalculateViolationsForAnAccessRequestQuery"
      },
      "task": true
    },
    {
      "name": "getAlertsQuery",
      "summary": "GetalertsQuery",
      "description": "Returns a list of all alerts. If an empty list is returned, it implies that there are no configured alerts for that context. You must set start and count parameters to limit the number of returned alerts. Start is zero based - to start from the second rule use start=1, to get rules 51-60 use start=50 and count=10.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAlertsQuery"
      },
      "task": true
    },
    {
      "name": "createAnAlertQuery",
      "summary": "CreateanalertQuery",
      "description": "Create an alert for unified security policies. Returns location with the alert id to get the alert. Alerts can be defined for all devices (all_devices:true) or for specified device IDs. An email and/or user name must be defined. For multiple entries of emails or user names, use a semicolon to separate values. For SecureTrack, users in the collection are populated with \"user_ids\". The alert will be sent to the users (according to the addresses configured in SecureTrack) and to the emails. To get ...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAnAlertQuery"
      },
      "task": true
    },
    {
      "name": "getASpecificAlertQuery",
      "summary": "GetaspecificalertQuery",
      "description": "Returns a specified alert. If the alert_id does not exist, an error message is returned.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The alert Id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificAlertQuery"
      },
      "task": true
    },
    {
      "name": "updateAnAlertQuery",
      "summary": "UpdateanalertQuery",
      "description": "Update an alert for unified security policies. Alerts can be defined for all devices (all_devices:true) or for specified device IDs. An email and/or user name must be defined. For multiple entries of emails or user names, use a semicolon to separate values. For SecureTrack, users in the collection are populated with \"user_ids\". The alert will be sent to the users (according to the addresses configured in SecureTrack) and to the emails. To get the domain_id (optional parameter), call /domains/ AP...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The alert ID for updating: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateAnAlertQuery"
      },
      "task": true
    },
    {
      "name": "deleteAlertsByIdsQuery",
      "summary": "deleteUSPAlert",
      "description": "Delete specified alerts by IDs To delete multiple alert_ids, use a comma between each ID",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteAlertsByIdsQuery"
      },
      "task": true
    },
    {
      "name": "createACloudTagPolicyQuery",
      "summary": "CreateacloudtagpolicyQuery",
      "description": "Create a new cloud tag policy. The policyName field specified in the TagPolicyDTO must be unique. Define the requirements enforced by the cloud tag policy in the requirements field of the TagPolicyDTO. The supported value for the \"requirement_type\" field are \"mandatory_tags\" and \"valid_values\"If the return code is not OK, the errorMessage field of the TagPolicyResponseDTO may contain additional details describing the cause of the error.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "cloud tag policy DTO: object",
          "required": false,
          "schema": {
            "type": "object",
            "description": "cloud tag policy DTO"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createACloudTagPolicyQuery"
      },
      "task": true
    },
    {
      "name": "getAllCloudTagPoliciesQuery",
      "summary": "GetallcloudtagpoliciesQuery",
      "description": "This API returns the details of all the tag policies.  Results are filtered according to user domain permissions and request context. If the return code is not OK, the errorMessage field of the TagPolicyResponseDTO may contain additional details describing the cause of the error.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAllCloudTagPoliciesQuery"
      },
      "task": true
    },
    {
      "name": "getCloudTagPolicyQuery",
      "summary": "GetcloudtagpolicyQuery",
      "description": "This API retrieves the details of the cloud tag policy specified by policyId.  User must have admin permissions to the policy affiliated domain. If the return code is not OK, the errorMessage field of the TagPolicyResponseDTO may contain additional details describing the cause of the error.",
      "input": [
        {
          "name": "policyId",
          "type": "string",
          "info": "cloud tag policy id: string",
          "required": true,
          "schema": {
            "title": "policyId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getCloudTagPolicyQuery"
      },
      "task": true
    },
    {
      "name": "replaceACloudTagPolicyQuery",
      "summary": "ReplaceacloudtagpolicyQuery",
      "description": "Replace the cloud tag policy specified by policyID with the new policy attributes.  Use PATCH in order to partially modify a policy. If the return code is not OK, the errorMessage field of the TagPolicyResponseDTO may contain additional details describing the cause of the error.",
      "input": [
        {
          "name": "policyId",
          "type": "string",
          "info": "cloud tag policy id: string",
          "required": true,
          "schema": {
            "title": "policyId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "cloud tag policy dTO: object",
          "required": false,
          "schema": {
            "type": "object",
            "description": "cloud tag policy dTO"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/replaceACloudTagPolicyQuery"
      },
      "task": true
    },
    {
      "name": "modifyACloudTagPolicyQuery",
      "summary": "ModifyacloudtagpolicyQuery",
      "description": "Partially modify a cloud tag policy by stating the modified attributes. Providing requirements replaces the entire list.  Specifying an empty requirement list is not permitted. Modify some attributes of the cloud tag policy specified by policyID with the attributes provided. If one or more \"requirement\" objects is provided, the exsiting \"requirement\" objects will be deleted and replaced with the new objetcs. Specifying an empty requirement list is not permitted.If the return code is not OK, the ...(description truncated)",
      "input": [
        {
          "name": "policyId",
          "type": "string",
          "info": "cloud tag policy id: string",
          "required": true,
          "schema": {
            "title": "policyId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "cloud tag policy dTO: object",
          "required": false,
          "schema": {
            "type": "object",
            "description": "cloud tag policy dTO"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifyACloudTagPolicyQuery"
      },
      "task": true
    },
    {
      "name": "deleteCloudTagPolicyQuery",
      "summary": "DeletecloudtagpolicyQuery",
      "description": "Delete the cloud tag policy specified by policyId.  If the return code is not OK, the errorMessage field of the TagPolicyResponseDTO may contain additional details describing the cause of the error.",
      "input": [
        {
          "name": "policyId",
          "type": "string",
          "info": "cloud tag policy id: string",
          "required": true,
          "schema": {
            "title": "policyId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteCloudTagPolicyQuery"
      },
      "task": true
    },
    {
      "name": "checkIfTagsAreCompliantWithCloudTagPoliciesQuery",
      "summary": "CheckiftagsarecompliantwithcloudtagpoliciesQuery",
      "description": "Check if the tags of a cloud resource are compliant with the specified cloud tag policy. Specify the tag policy to validate in the TagPolicyViolationsCheckRequestDTO. The tags of a cloud resource are specified as a json object with the attribute 'tags' at the root level. 'tags' attributes can be a list of tag names or a map including both the tag name and value. If no tags are specified or if the tag is specified incorrectly, The compliance check will treat the resource as if it has no tags. If ...(description truncated)",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "Tag policy violation check request: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "Tag policy violation check request"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/checkIfTagsAreCompliantWithCloudTagPoliciesQuery"
      },
      "task": true
    },
    {
      "name": "getAllCloudTagPolicyViolationsForAVPCQuery",
      "summary": "GetallcloudtagpolicyviolationsforaVPCQuery",
      "description": "Retrieve all cloud tag policy violations for the specified VPC and severity level.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAllCloudTagPolicyViolationsForAVPCQuery"
      },
      "task": true
    },
    {
      "name": "createAnExceptionQuery",
      "summary": "CreateanexceptionQuery",
      "description": "Create an exception for unified security policies.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": ": object",
          "required": false,
          "schema": {
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAnExceptionQuery"
      },
      "task": true
    },
    {
      "name": "getAllExceptionsQuery",
      "summary": "GetallexceptionsQuery",
      "description": "Gets a list of all unified security policy exceptions. If you have TOS Aurora installed, and you are using the SecureTrack REST API to get USP exceptions, only exceptions created using the API will be returned. USP Traffic Exceptions created in USP Exceptions Viewer, or GraphQL will not be returned.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAllExceptionsQuery"
      },
      "task": true
    },
    {
      "name": "getASpecificExceptionQuery",
      "summary": "Getget2",
      "description": "Gets a specific exception for unified security policies. If you have TOS Aurora installed, and you are using the SecureTrack REST API to get USP exceptions, only exceptions created using the API will be returned. USP Traffic Exceptions created in USP Exceptions Viewer, or GraphQL will not be returned.",
      "input": [
        {
          "name": "exceptionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "exceptionId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificExceptionQuery"
      },
      "task": true
    },
    {
      "name": "deleteAnExceptionQuery",
      "summary": "Deletedelete2",
      "description": "Delete the specific unified security policy exceptions. If you have TOS Aurora installed, and you are using the SecureTrack REST API to get USP exceptions, only exceptions created using the API will be returned. USP Traffic Exceptions created in USP Exceptions Viewer, or GraphQL will not be returned.",
      "input": [
        {
          "name": "exceptionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "exceptionId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteAnExceptionQuery"
      },
      "task": true
    },
    {
      "name": "startATaskToCalculateMatchingRulesForAnExceptionQuery",
      "summary": "Postcreate4",
      "description": "Create a calculation task to find matching rules. The results will be on the relevant devices for each access. Returns a task Id that can be used to check the task status and get the task results",
      "input": [
        {
          "name": "exceptionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "exceptionId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/startATaskToCalculateMatchingRulesForAnExceptionQuery"
      },
      "task": true
    },
    {
      "name": "getGlobalUnifiedSecurityPoliciesQuery",
      "summary": "GetglobalunifiedsecuritypoliciesQuery",
      "description": "Fetches the global security zone matrices defined under Unified Security Policy.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getGlobalUnifiedSecurityPoliciesQuery"
      },
      "task": true
    },
    {
      "name": "getUnifiedSecurityPoliciesQuery",
      "summary": "GetunifiedsecuritypoliciesQuery",
      "description": "Fetches the security zone matrices defined under Unified Security Policy.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getUnifiedSecurityPoliciesQuery"
      },
      "task": true
    },
    {
      "name": "deleteUnifiedSecurityPolicyQuery",
      "summary": "DeleteunifiedsecuritypolicyQuery",
      "description": "Delete a Security Policy Matrix",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "The unique identifier of the security policy matrix to delete: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteUnifiedSecurityPolicyQuery"
      },
      "task": true
    },
    {
      "name": "getUnifiedSecurityPolicyAsCSVQuery",
      "summary": "GetunifiedsecuritypolicyasCSVQuery",
      "description": "Exports a Security Policy in CSV format",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "ID of the security policy.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getUnifiedSecurityPolicyAsCSVQuery"
      },
      "task": true
    },
    {
      "name": "setManualDeviceMappingQuery",
      "summary": "setManualDeviceMapping",
      "description": "Add or remove a zone on a device interface",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "InterfacesManualMappingsDTO: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "InterfacesManualMappingsDTO"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/setManualDeviceMappingQuery"
      },
      "task": true
    },
    {
      "name": "getUrlCategories",
      "summary": "getUrlCategories",
      "description": "Fetches list of URL Categories defined in a revision given by ID. This API is supported for Panorama in advanced mode and Panorama Device Groups.",
      "input": [
        {
          "name": "revisionId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "revisionId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getUrlCategories"
      },
      "task": true
    },
    {
      "name": "getProperties",
      "summary": "getProperties",
      "description": "This API requires 'Super admin' privileges",
      "input": [],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "GET",
        "path": "/getProperties"
      },
      "task": true
    },
    {
      "name": "setProperties",
      "summary": "setProperties",
      "description": "This API requires 'Super admin' privileges This APIs allows you to set the following properties:  1. LICENSE_ABOUT_TO_EXPIRE_THRESHOLD &emsp;&emsp;Defines - how many calendar days before an SKU expiration a notification is sent to system admin. &emsp;&emsp;Default value - 45 days &emsp;&emsp;Allowed values - 1 to 365 days",
      "input": [
        {
          "name": "body",
          "type": "object",
          "info": "Properties: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "Properties"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/setProperties"
      },
      "task": true
    },
    {
      "name": "getPBRRules",
      "summary": "getPBRRules",
      "description": "This API returns  PBR routes and ACL in the topology map",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getPBRRules"
      },
      "task": true
    },
    {
      "name": "cloudSuggestions",
      "summary": "cloudSuggestions",
      "description": "Returns information about all clouds in the topology. This API includes the ID of the cloud, the number of routes that point to the cloud, and the relevant devices (including the management_id) that have routes that point to the cloud. This information can be used to identify missing devices that may need to be added to the topology or to identify clouds that are candidates for being joined.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/cloudSuggestions"
      },
      "task": true
    },
    {
      "name": "cloudSuggestion",
      "summary": "cloudSuggestion",
      "description": "Returns information about a specific cloud in the topology. This API includes the ID of the cloud, the number of routes that point to the cloud, and the relevant devices (including the management_id) that have routes that point to the cloud. This information can be used to identify missing devices that may need to be added to the topology or to identify clouds that are candidates for being joined.",
      "input": [
        {
          "name": "cloudId",
          "type": "number",
          "info": "cloud id: 123",
          "required": true,
          "schema": {
            "title": "cloudId",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/cloudSuggestion"
      },
      "task": true
    },
    {
      "name": "getRouteMaps",
      "summary": "getRouteMaps",
      "description": "Returns a list of the route maps for the specified Cisco IOS device.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRouteMaps"
      },
      "task": true
    },
    {
      "name": "addZonesEntries",
      "summary": "addZonesEntries",
      "description": "For IPv4 entry provide IP and netmask/prefix (see Usage Example #1 zone entries #1 and #2). For IPv6 provide IP and prefix only, netmask is not allowed(see Usage Example #1 zone entry #4).",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "The zone entry to create.: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "The zone entry to create."
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/addZonesEntries"
      },
      "task": true
    },
    {
      "name": "getSdWanBindingsByRevision",
      "summary": "Returns a list of all of the subpolicies (bindings) for a given revision.",
      "description": "Returns a list of all of the subpolicies (bindings) for a given revision. The definition of subpolicy is different for each vendor: Check Point - policy package and inline layer (inline layer will be returned only when the optional include_subpolicy parameter is set to true) Cisco - ACL Juniper/Fortinet/Palo Alto/Stonesoft - zone-to-zone policy Cloud platforms - Security Groups",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSdWanBindingsByRevision"
      },
      "task": true
    },
    {
      "name": "getSdWanBindingsByDevice",
      "summary": "Returns a list of all of the subpolicies (bindings) for a given device",
      "description": "Returns a list of all of the subpolicies (bindings) for a given device. The definition of subpolicy is different for each vendor: Check Point - policy package and inline layer (inline layer will be returned only when the optional include_subpolicy parameter is set to true) Cisco - ACL Juniper/Fortinet/Palo Alto/Stonesoft - zone-to-zone policy Cloud platforms - Security Groups",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSdWanBindingsByDevice"
      },
      "task": true
    },
    {
      "name": "exportRulesToCsv",
      "summary": "exportRulesToCsv",
      "description": "The search_text parameter provides the same capabilities as the Policy Browser feature in SecureTrack. You can search for a string across all rule fields, or you can search for a combination of specific strings in specific fields. The text format is for a field is  :  for example uid:9259f6ee-47a0-4996-a214-ab7edc14a916. See the search info documentation in Securetrack Policy Browser page for more information. This API exports the results data as a CSV file in the SecureTrack Reports Repository.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/exportRulesToCsv"
      },
      "task": true
    },
    {
      "name": "findServicesObjects",
      "summary": "findServicesObjects",
      "description": "You can search for service objects where the name or comment fields have a specified text string, or you can search for service objects that have an Port or protocol that matches, or you can search for service objects by uid.",
      "input": [
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/findServicesObjects"
      },
      "task": true
    },
    {
      "name": "getDeviceMapping",
      "summary": "getDeviceMapping",
      "description": "Fetches mapping of SecureTrack zones to device interfaces",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getDeviceMapping"
      },
      "task": true
    },
    {
      "name": "getResolvedInternetRepresentationForDeviceQuery",
      "summary": "getInternetObject",
      "description": "The order of precedence used to resolve the Internet object is: Step 1: Identify the Internet referral: Search for a defined Internet referral on the specified device. If it is not found on the device, search the parent and grandparents (up the device tree) for a defined Internet referral. If a defined Internet referral is found, then match the name in the Internet referral to a network object, as defined in Step 2. If an Internet referral is not found, it resolves to \"Any\". Step 2: Resolve the ...(description truncated)",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getResolvedInternetRepresentationForDeviceQuery"
      },
      "task": true
    },
    {
      "name": "updateInternetRepresentationForDeviceQuery",
      "summary": "update",
      "description": "Updates the Internet referral configuration for the device. If there was no previous configuration, it will be created.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "Internet referral configuration: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "Internet referral configuration"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/updateInternetRepresentationForDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getInternetRepresentationForDeviceQuery",
      "summary": "get",
      "description": "Get Internet representation for device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getInternetRepresentationForDeviceQuery"
      },
      "task": true
    },
    {
      "name": "deleteInternetRepresentationForDeviceQuery",
      "summary": "delete",
      "description": "Delete Internet representation for device",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteInternetRepresentationForDeviceQuery"
      },
      "task": true
    },
    {
      "name": "createAZonePatternEntryInASpecificZoneQuery",
      "summary": "addPatternMatchEntry",
      "description": "Create a zone pattern entry in a specific zone by identifier. The Zone ID listed in the API call will always override the Zone ID in the DTO if there is a mismatch in the Zone ID",
      "input": [
        {
          "name": "zoneId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "The zone pattern entry to create.: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "The zone pattern entry to create."
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/createAZonePatternEntryInASpecificZoneQuery"
      },
      "task": true
    },
    {
      "name": "getAllPatternEntriesForSpecificZonesQuery",
      "summary": "getPatternMatchEntries",
      "description": "Get the list of zone pattern entries for specific zones by identifiers",
      "input": [
        {
          "name": "ids",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ids",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getAllPatternEntriesForSpecificZonesQuery"
      },
      "task": true
    },
    {
      "name": "getASpecificZonePatternEntryForASpecificZoneQuery",
      "summary": "getPatternMatchEntry",
      "description": "Get a specific zone pattern entry for a specific zone by identifier",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Identifier of the zone pattern entry.: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "zoneId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "zoneId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getASpecificZonePatternEntryForASpecificZoneQuery"
      },
      "task": true
    },
    {
      "name": "getRevisionsIdRulesRuleIdDocumentationQuery",
      "summary": "Fetches rule documentation",
      "description": "Fetches rule documentation for a single rule given by revision ID and rule ID.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getRevisionsIdRulesRuleIdDocumentationQuery"
      },
      "task": true
    },
    {
      "name": "putRevisionsIdRulesRuleIdDocumentationQuery",
      "summary": "modifyRuleDocumentation",
      "description": "Modify rule documentation for a single rule identified by revision ID and rule ID. A single rule can be set as either a stealth rule or legacy rule. If both flags are set, an error will be returned (error 400, Bad request). If no rule documentation exists for the rule, the specified documentation is added to the rule and the response code is: 201 Created. If rule documentation already exists for the rule, the specified documentation replaces the existing documentation and the response code is: 2...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "RuleDocumentationDTO: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "RuleDocumentationDTO"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/putRevisionsIdRulesRuleIdDocumentationQuery"
      },
      "task": true
    },
    {
      "name": "deleteRuleDocumentation",
      "summary": "deleteRuleDocumentation",
      "description": "Delete rule documentation for a single rule given by revision ID and rule ID. If the rule has automatic mapping to a ticket, the record is not deleted.",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Revision id: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteRuleDocumentation"
      },
      "task": true
    },
    {
      "name": "getSpecificRuleDocumentationQuery",
      "summary": "Fetches rule documentation for a single rule given by device ID and rule ID",
      "description": "Fetches rule documentation for a single rule given by device ID and rule ID",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getSpecificRuleDocumentationQuery"
      },
      "task": true
    },
    {
      "name": "modifySpecificRuleDocumentationQuery",
      "summary": "Modify rule documentation for a single rule given by device ID and rule ID",
      "description": "Modify rule documentation for a single rule given by device ID and rule ID A single rule can be set as either a stealth rule or legacy rule. If both flags are set, an error will be returned (error 400, Bad request). If there is no existing rule documentation for the rule, the specified documentation is added to the rule and the response code is: 201 Created. If there is existing rule documentation for the rule, the specified documentation replaces the existing documentation and the response code...(description truncated)",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        },
        {
          "name": "body",
          "type": "object",
          "info": "RuleDocumentationDTO: object",
          "required": true,
          "schema": {
            "type": "object",
            "description": "RuleDocumentationDTO"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/modifySpecificRuleDocumentationQuery"
      },
      "task": true
    },
    {
      "name": "deleteSpecificRuleDocumentationQuery",
      "summary": "Delete rule documentation for a single rule",
      "description": "Delete rule documentation for a single rule given by device ID and rule ID",
      "input": [
        {
          "name": "id",
          "type": "number",
          "info": "Device ID: 123",
          "required": true,
          "schema": {
            "title": "id",
            "type": "number"
          }
        },
        {
          "name": "ruleId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "ruleId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/deleteSpecificRuleDocumentationQuery"
      },
      "task": true
    },
    {
      "name": "getLastHitsForAllRulesByDeviceQuery",
      "summary": "findAllWithObjects",
      "description": "Get last hit dates for all rules in a given device. For Palo Alto firewalls, this also returns last hits for users and applications in the rule.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getLastHitsForAllRulesByDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getlasthitforaspecificruleQuery",
      "summary": "findWithObjects",
      "description": "Get last hit dates for all rules in a given device. For Palo Alto firewalls, this also returns last hits for users and applications in the rule. The rule_uid is the value from the uid field returned by the /rules API: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "input": [
        {
          "name": "ruleUid",
          "type": "string",
          "info": "rule_uid: string",
          "required": true,
          "schema": {
            "title": "ruleUid",
            "type": "string"
          }
        },
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getlasthitforaspecificruleQuery"
      },
      "task": true
    },
    {
      "name": "getTheAmountOfViolatingRulesForTheSpecifiedDeviceQuery",
      "summary": "getRulesCount",
      "description": "Get the amount of violating rules for the specified device.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTheAmountOfViolatingRulesForTheSpecifiedDeviceQuery"
      },
      "task": true
    },
    {
      "name": "getTheViolatingRulesForTheSpecifiedDeviceQuery",
      "summary": "GetgetDeviceViolations",
      "description": "policyName is supported for management devices running in Advanced management mode.",
      "input": [
        {
          "name": "deviceId",
          "type": "string",
          "info": ": string",
          "required": true,
          "schema": {
            "title": "deviceId",
            "type": "string"
          }
        },
        {
          "name": "queryObject",
          "type": "object",
          "info": "Object containing query parameters: object",
          "required": false,
          "schema": {
            "title": "queryObject",
            "type": "object"
          }
        }
      ],
      "output": {
        "name": "result",
        "type": "object",
        "description": "A JSON Object containing status, code and the result",
        "schema": {
          "title": "result",
          "type": "object"
        }
      },
      "roles": [
        "admin"
      ],
      "route": {
        "verb": "POST",
        "path": "/getTheViolatingRulesForTheSpecifiedDeviceQuery"
      },
      "task": true
    }
  ]
}